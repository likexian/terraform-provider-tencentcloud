// Code generated by iacg; DO NOT EDIT.
package teo

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	teo "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/teo/v20220901"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudTeoOriginGroup() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudTeoOriginGroupCreate,
		Read:   resourceTencentCloudTeoOriginGroupRead,
		Update: resourceTencentCloudTeoOriginGroupUpdate,
		Delete: resourceTencentCloudTeoOriginGroupDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"zone_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "Site ID.",
			},

			"origin_group_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "OriginGroup ID.",
			},

			"origin_group_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "OriginGroup Name.",
			},

			"origin_type": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Type of the origin site. Valid values:\n- `self`: self-build website.\n- `cos`: tencent cos.\n- `third_party`: third party cos.",
			},

			"configuration_type": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Type of the origin group, this field should be set when `OriginType` is self, otherwise leave it empty. Valid values:\n- `area`: select an origin by using Geo info of the client IP and `Area` field in Records.\n- `weight`: weighted select an origin by using `Weight` field in Records.\n- `proto`: config by HTTP protocol.",
			},

			"origin_records": {
				Type:        schema.TypeList,
				Required:    true,
				Description: "Origin site records.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"record_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Record Id.",
						},
						"record": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Record value, which could be an IPv4/IPv6 address or a domain.",
						},
						"port": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Port of the origin site. Valid value range: 1-65535.",
						},
						"weight": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "Indicating origin site's weight when `Type` field is `weight`. Valid value range: 1-100. Sum of all weights should be 100.",
						},
						"area": {
							Type:        schema.TypeSet,
							Optional:    true,
							Description: "Indicating origin site's area when `Type` field is `area`. An empty List indicate the default area. Valid value:\n- Asia, Americas, Europe, Africa or Oceania.\n- 2 characters ISO 3166 area code.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"private": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Whether origin site is using private authentication. Only valid when `OriginType` is `third_party`.",
						},
						"private_parameter": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "Parameters for private authentication. Only valid when `Private` is `true`.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Parameter Name. Valid values:\n- AccessKeyId：Access Key ID.\n- SecretAccessKey：Secret Access Key.",
									},
									"value": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Parameter value.",
									},
								},
							},
						},
					},
				},
			},

			"update_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Last modification date.",
			},
		},
	}
}

func resourceTencentCloudTeoOriginGroupCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_teo_origin_group.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		zoneId        string
		originGroupId string
	)
	var (
		request  = teo.NewCreateOriginGroupRequest()
		response = teo.NewCreateOriginGroupResponse()
	)

	if v, ok := d.GetOk("zone_id"); ok {
		zoneId = v.(string)
	}

	request.ZoneId = &zoneId

	if v, ok := d.GetOk("origin_group_name"); ok {
		request.OriginGroupName = helper.String(v.(string))
	}

	if v, ok := d.GetOk("origin_type"); ok {
		request.OriginType = helper.String(v.(string))
	}

	if v, ok := d.GetOk("configuration_type"); ok {
		request.ConfigurationType = helper.String(v.(string))
	}

	if v, ok := d.GetOk("origin_records"); ok {
		for _, item := range v.([]interface{}) {
			originRecordsMap := item.(map[string]interface{})
			originRecord := teo.OriginRecord{}
			if v, ok := originRecordsMap["record"]; ok {
				originRecord.Record = helper.String(v.(string))
			}
			if v, ok := originRecordsMap["port"]; ok {
				originRecord.Port = helper.IntUint64(v.(int))
			}
			if v, ok := originRecordsMap["weight"]; ok {
				originRecord.Weight = helper.IntUint64(v.(int))
			}
			if v, ok := originRecordsMap["area"]; ok {
				areaSet := v.(*schema.Set).List()
				for i := range areaSet {
					area := areaSet[i].(string)
					originRecord.Area = append(originRecord.Area, helper.String(area))
				}
			}
			if v, ok := originRecordsMap["private"]; ok {
				originRecord.Private = helper.Bool(v.(bool))
			}
			if v, ok := originRecordsMap["private_parameter"]; ok {
				for _, item := range v.([]interface{}) {
					privateParametersMap := item.(map[string]interface{})
					privateParameter := teo.PrivateParameter{}
					if v, ok := privateParametersMap["name"]; ok {
						privateParameter.Name = helper.String(v.(string))
					}
					if v, ok := privateParametersMap["value"]; ok {
						privateParameter.Value = helper.String(v.(string))
					}
					originRecord.PrivateParameters = append(originRecord.PrivateParameters, &privateParameter)
				}
			}
			request.OriginRecords = append(request.OriginRecords, &originRecord)
		}
	}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTeoClient().CreateOriginGroupWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create teo origin group failed, reason:%+v", logId, err)
		return err
	}

	originGroupId = *response.Response.OriginGroupId

	d.SetId(strings.Join([]string{zoneId, originGroupId}, tccommon.FILED_SP))

	return resourceTencentCloudTeoOriginGroupRead(d, meta)
}

func resourceTencentCloudTeoOriginGroupRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_teo_origin_group.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := TeoService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	zoneId := idSplit[0]
	originGroupId := idSplit[1]

	_ = d.Set("zone_id", zoneId)

	respData, err := service.DescribeTeoOriginGroupById(ctx, originGroupId)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `teo_origin_group` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}
	if respData.OriginGroupId != nil {
		_ = d.Set("origin_group_id", respData.OriginGroupId)
		originGroupId = *respData.OriginGroupId
	}

	if respData.OriginGroupName != nil {
		_ = d.Set("origin_group_name", respData.OriginGroupName)
	}

	if respData.OriginType != nil {
		_ = d.Set("origin_type", respData.OriginType)
	}

	if respData.ConfigurationType != nil {
		_ = d.Set("configuration_type", respData.ConfigurationType)
	}

	originRecordsList := make([]map[string]interface{}, 0, len(respData.OriginRecords))
	if respData.OriginRecords != nil {
		for _, originRecords := range respData.OriginRecords {
			originRecordsMap := map[string]interface{}{}

			if originRecords.RecordId != nil {
				originRecordsMap["record_id"] = originRecords.RecordId
			}

			if originRecords.Record != nil {
				originRecordsMap["record"] = originRecords.Record
			}

			if originRecords.Port != nil {
				originRecordsMap["port"] = originRecords.Port
			}

			if originRecords.Weight != nil {
				originRecordsMap["weight"] = originRecords.Weight
			}

			if originRecords.Area != nil {
				originRecordsMap["area"] = originRecords.Area
			}

			if originRecords.Private != nil {
				originRecordsMap["private"] = originRecords.Private
			}

			privateParametersList := make([]map[string]interface{}, 0, len(originRecords.PrivateParameters))
			if originRecords.PrivateParameters != nil {
				for _, privateParameters := range originRecords.PrivateParameters {
					privateParametersMap := map[string]interface{}{}

					if privateParameters.Name != nil {
						privateParametersMap["name"] = privateParameters.Name
					}

					if privateParameters.Value != nil {
						privateParametersMap["value"] = privateParameters.Value
					}

					privateParametersList = append(privateParametersList, privateParametersMap)
				}

				originRecordsMap["private_parameter"] = privateParametersList
			}
			originRecordsList = append(originRecordsList, originRecordsMap)
		}

		_ = d.Set("origin_records", originRecordsList)
	}

	if respData.UpdateTime != nil {
		_ = d.Set("update_time", respData.UpdateTime)
	}

	_ = zoneId
	return nil
}

func resourceTencentCloudTeoOriginGroupUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_teo_origin_group.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	zoneId := idSplit[0]
	originGroupId := idSplit[1]

	needChange := false
	mutableArgs := []string{"origin_group_name", "origin_type", "configuration_type", "origin_records"}
	for _, v := range mutableArgs {
		if d.HasChange(v) {
			needChange = true
			break
		}
	}

	if needChange {
		request := teo.NewModifyOriginGroupRequest()

		request.ZoneId = &zoneId

		request.OriginGroupId = &originGroupId

		if v, ok := d.GetOk("origin_group_name"); ok {
			request.OriginGroupName = helper.String(v.(string))
		}

		if v, ok := d.GetOk("origin_type"); ok {
			request.OriginType = helper.String(v.(string))
		}

		if v, ok := d.GetOk("configuration_type"); ok {
			request.ConfigurationType = helper.String(v.(string))
		}

		if v, ok := d.GetOk("origin_records"); ok {
			for _, item := range v.([]interface{}) {
				originRecordsMap := item.(map[string]interface{})
				originRecord := teo.OriginRecord{}
				if v, ok := originRecordsMap["record"]; ok {
					originRecord.Record = helper.String(v.(string))
				}
				if v, ok := originRecordsMap["port"]; ok {
					originRecord.Port = helper.IntUint64(v.(int))
				}
				if v, ok := originRecordsMap["weight"]; ok {
					originRecord.Weight = helper.IntUint64(v.(int))
				}
				if v, ok := originRecordsMap["area"]; ok {
					areaSet := v.(*schema.Set).List()
					for i := range areaSet {
						area := areaSet[i].(string)
						originRecord.Area = append(originRecord.Area, helper.String(area))
					}
				}
				if v, ok := originRecordsMap["private"]; ok {
					originRecord.Private = helper.Bool(v.(bool))
				}
				if v, ok := originRecordsMap["private_parameter"]; ok {
					for _, item := range v.([]interface{}) {
						privateParametersMap := item.(map[string]interface{})
						privateParameter := teo.PrivateParameter{}
						if v, ok := privateParametersMap["name"]; ok {
							privateParameter.Name = helper.String(v.(string))
						}
						if v, ok := privateParametersMap["value"]; ok {
							privateParameter.Value = helper.String(v.(string))
						}
						originRecord.PrivateParameters = append(originRecord.PrivateParameters, &privateParameter)
					}
				}
				request.OriginRecords = append(request.OriginRecords, &originRecord)
			}
		}

		err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTeoClient().ModifyOriginGroupWithContext(ctx, request)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
			}
			return nil
		})
		if err != nil {
			log.Printf("[CRITAL]%s update teo origin group failed, reason:%+v", logId, err)
			return err
		}
	}

	return resourceTencentCloudTeoOriginGroupRead(d, meta)
}

func resourceTencentCloudTeoOriginGroupDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_teo_origin_group.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	zoneId := idSplit[0]
	originGroupId := idSplit[1]

	var (
		request  = teo.NewDeleteOriginGroupRequest()
		response = teo.NewDeleteOriginGroupResponse()
	)

	if v, ok := d.GetOk("zone_id"); ok {
		zoneId = v.(string)
	}

	request.ZoneId = &zoneId

	request.OriginGroupId = &originGroupId

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTeoClient().DeleteOriginGroupWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create teo origin group failed, reason:%+v", logId, err)
		return err
	}

	_ = response
	return nil
}
