// Code generated by iacg; DO NOT EDIT.
package teo

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	teo "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/teo/v20220901"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudTeoAccelerationDomain() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudTeoAccelerationDomainCreate,
		Read:   resourceTencentCloudTeoAccelerationDomainRead,
		Update: resourceTencentCloudTeoAccelerationDomainUpdate,
		Delete: resourceTencentCloudTeoAccelerationDomainDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"zone_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "ID of the site related with the accelerated domain name.",
			},

			"domain_name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "Accelerated domain name.",
			},

			"origin_info": {
				Type:        schema.TypeList,
				Required:    true,
				MaxItems:    1,
				Description: "Details of the origin.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"origin_type": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "The origin type. Values: `IP_DOMAIN`: IPv4/IPv6 address or domain name; `COS`: COS bucket address; `ORIGIN_GROUP`: Origin group; `AWS_S3`: AWS S3 bucket address; `SPACE`: EdgeOne Shield Space.",
						},
						"origin": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "The origin address. Enter the origin group ID if `OriginType=ORIGIN_GROUP`.",
						},
						"backup_origin": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "ID of the secondary origin group (valid when `OriginType=ORIGIN_GROUP`). If it is not specified, it indicates that secondary origins are not used.",
						},
						"private_access": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Whether to authenticate access to the private object storage origin (valid when `OriginType=COS/AWS_S3`). Values: `on`: Enable private authentication; `off`: Disable private authentication. If this field is not specified, the default value `off` is used.",
						},
						"private_parameters": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "The private authentication parameters. This field is valid when `PrivateAccess=on`.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "The parameter name. Valid values: `AccessKeyId`: Access Key ID; `SecretAccessKey`: Secret Access Key.",
									},
									"value": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "The parameter value.",
									},
								},
							},
						},
					},
				},
			},

			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Accelerated domain name status, the values are: `online`: enabled; `offline`: disabled.",
			},

			"cname": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "CNAME address.",
			},
		},
	}
}

func resourceTencentCloudTeoAccelerationDomainCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_teo_acceleration_domain.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		zoneId     string
		domainName string
	)
	var (
		request  = teo.NewCreateAccelerationDomainRequest()
		response = teo.NewCreateAccelerationDomainResponse()
	)

	if v, ok := d.GetOk("zone_id"); ok {
		zoneId = v.(string)
	}
	if v, ok := d.GetOk("domain_name"); ok {
		domainName = v.(string)
	}

	if v, ok := d.GetOk("zone_id"); ok {
		request.ZoneId = helper.String(v.(string))
	}

	if v, ok := d.GetOk("domain_name"); ok {
		request.DomainName = helper.String(v.(string))
	}

	if originInfoMap, ok := helper.InterfacesHeadMap(d, "origin_info"); ok {
		originInfo := teo.OriginInfo{}
		if v, ok := originInfoMap["origin_type"]; ok {
			originInfo.OriginType = helper.String(v.(string))
		}
		if v, ok := originInfoMap["origin"]; ok {
			originInfo.Origin = helper.String(v.(string))
		}
		if v, ok := originInfoMap["backup_origin"]; ok {
			originInfo.BackupOrigin = helper.String(v.(string))
		}
		if v, ok := originInfoMap["private_access"]; ok {
			originInfo.PrivateAccess = helper.String(v.(string))
		}
		if v, ok := originInfoMap["private_parameters"]; ok {
			for _, item := range v.([]interface{}) {
				privateParametersMap := item.(map[string]interface{})
				privateParameter := teo.PrivateParameter{}
				if v, ok := privateParametersMap["name"]; ok {
					privateParameter.Name = helper.String(v.(string))
				}
				if v, ok := privateParametersMap["value"]; ok {
					privateParameter.Value = helper.String(v.(string))
				}
				originInfo.PrivateParameters = append(originInfo.PrivateParameters, &privateParameter)
			}
		}
		request.OriginInfo = &originInfo
	}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTeoClient().CreateAccelerationDomainWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create teo acceleration domain failed, reason:%+v", logId, err)
		return err
	}

	_ = response

	if err := resourceTencentCloudTeoAccelerationDomainCreatePostHandleResponse0(ctx, response); err != nil {
		return err
	}

	d.SetId(strings.Join([]string{zoneId, domainName}, tccommon.FILED_SP))

	return resourceTencentCloudTeoAccelerationDomainRead(d, meta)
}

func resourceTencentCloudTeoAccelerationDomainRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_teo_acceleration_domain.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := TeoService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	zoneId := idSplit[0]
	domainName := idSplit[1]

	_ = d.Set("zone_id", zoneId)

	_ = d.Set("domain_name", domainName)

	respData, err := service.DescribeTeoAccelerationDomainById(ctx, zoneId, domainName)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `teo_acceleration_domain` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}
	if respData.ZoneId != nil {
		_ = d.Set("zone_id", respData.ZoneId)
	}

	if respData.DomainName != nil {
		_ = d.Set("domain_name", respData.DomainName)
	}

	if respData.Cname != nil {
		_ = d.Set("cname", respData.Cname)
	}

	originDetailMap := map[string]interface{}{}

	if respData.OriginDetail != nil {
		if respData.OriginDetail.OriginType != nil {
			originDetailMap["origin_type"] = respData.OriginDetail.OriginType
		}

		if respData.OriginDetail.Origin != nil {
			originDetailMap["origin"] = respData.OriginDetail.Origin
		}

		if respData.OriginDetail.BackupOrigin != nil {
			originDetailMap["backup_origin"] = respData.OriginDetail.BackupOrigin
		}

		if respData.OriginDetail.PrivateAccess != nil {
			originDetailMap["private_access"] = respData.OriginDetail.PrivateAccess
		}

		privateParametersList := make([]map[string]interface{}, 0, len(respData.OriginDetail.PrivateParameters))
		if respData.OriginDetail.PrivateParameters != nil {
			for _, privateParameters := range respData.OriginDetail.PrivateParameters {
				privateParametersMap := map[string]interface{}{}

				if privateParameters.Name != nil {
					privateParametersMap["name"] = privateParameters.Name
				}

				if privateParameters.Value != nil {
					privateParametersMap["value"] = privateParameters.Value
				}

				privateParametersList = append(privateParametersList, privateParametersMap)
			}

			originDetailMap["private_parameters"] = privateParametersList
		}
		_ = d.Set("origin_info", []interface{}{originDetailMap})
	}

	return nil
}

func resourceTencentCloudTeoAccelerationDomainUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_teo_acceleration_domain.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	zoneId := idSplit[0]
	domainName := idSplit[1]

	needChange := false
	mutableArgs := []string{"origin_info"}
	for _, v := range mutableArgs {
		if d.HasChange(v) {
			needChange = true
			break
		}
	}

	if needChange {
		request := teo.NewModifyAccelerationDomainRequest()

		request.ZoneId = &zoneId

		request.DomainName = &domainName

		if originInfoMap, ok := helper.InterfacesHeadMap(d, "origin_info"); ok {
			originInfo := teo.OriginInfo{}
			if v, ok := originInfoMap["origin_type"]; ok {
				originInfo.OriginType = helper.String(v.(string))
			}
			if v, ok := originInfoMap["origin"]; ok {
				originInfo.Origin = helper.String(v.(string))
			}
			if v, ok := originInfoMap["backup_origin"]; ok {
				originInfo.BackupOrigin = helper.String(v.(string))
			}
			if v, ok := originInfoMap["private_access"]; ok {
				originInfo.PrivateAccess = helper.String(v.(string))
			}
			if v, ok := originInfoMap["private_parameters"]; ok {
				for _, item := range v.([]interface{}) {
					privateParametersMap := item.(map[string]interface{})
					privateParameter := teo.PrivateParameter{}
					if v, ok := privateParametersMap["name"]; ok {
						privateParameter.Name = helper.String(v.(string))
					}
					if v, ok := privateParametersMap["value"]; ok {
						privateParameter.Value = helper.String(v.(string))
					}
					originInfo.PrivateParameters = append(originInfo.PrivateParameters, &privateParameter)
				}
			}
			request.OriginInfo = &originInfo
		}

		err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTeoClient().ModifyAccelerationDomainWithContext(ctx, request)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
			}
			return nil
		})
		if err != nil {
			log.Printf("[CRITAL]%s update teo acceleration domain failed, reason:%+v", logId, err)
			return err
		}
	}

	needChange1 := false
	mutableArgs1 := []string{"status"}
	for _, v := range mutableArgs1 {
		if d.HasChange(v) {
			needChange1 = true
			break
		}
	}

	if needChange1 {
		request1 := teo.NewModifyAccelerationDomainStatusesRequest()

		request1.ZoneId = &zoneId

		request1.DomainNames = []*string{&domainName}

		if v, ok := d.GetOk("status"); ok {
			request1.Status = helper.String(v.(string))
		}

		err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTeoClient().ModifyAccelerationDomainStatusesWithContext(ctx, request1)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request1.GetAction(), request1.ToJsonString(), result.ToJsonString())
			}
			return nil
		})
		if err != nil {
			log.Printf("[CRITAL]%s update teo acceleration domain failed, reason:%+v", logId, err)
			return err
		}
	}

	if err := resourceTencentCloudTeoAccelerationDomainUpdateOnExit(ctx); err != nil {
		return err
	}

	return resourceTencentCloudTeoAccelerationDomainRead(d, meta)
}

func resourceTencentCloudTeoAccelerationDomainDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_teo_acceleration_domain.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 2 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	zoneId := idSplit[0]
	domainName := idSplit[1]

	var (
		request  = teo.NewModifyAccelerationDomainStatusesRequest()
		response = teo.NewModifyAccelerationDomainStatusesResponse()
	)

	if v, ok := d.GetOk("zone_id"); ok {
		zoneId = v.(string)
	}
	if v, ok := d.GetOk("domain_name"); ok {
		domainName = v.(string)
	}

	request.ZoneId = &zoneId

	request.DomainNames = []*string{&domainName}

	status := "offline"
	request.Status = &status

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTeoClient().ModifyAccelerationDomainStatusesWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create teo acceleration domain failed, reason:%+v", logId, err)
		return err
	}

	_ = response
	if err := resourceTencentCloudTeoAccelerationDomainDeletePostHandleResponse0(ctx, response); err != nil {
		return err
	}

	var (
		request1  = teo.NewDeleteAccelerationDomainsRequest()
		response1 = teo.NewDeleteAccelerationDomainsResponse()
	)

	if v, ok := d.GetOk("zone_id"); ok {
		zoneId = v.(string)
	}
	if v, ok := d.GetOk("domain_name"); ok {
		domainName = v.(string)
	}

	request1.ZoneId = &zoneId

	request1.DomainNames = []*string{&domainName}

	err = resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTeoClient().DeleteAccelerationDomainsWithContext(ctx, request1)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request1.GetAction(), request1.ToJsonString(), result.ToJsonString())
		}
		response1 = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create teo acceleration domain failed, reason:%+v", logId, err)
		return err
	}

	_ = response1
	return nil
}
