// Code generated by iacg; DO NOT EDIT.
package cam

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	camv20190116 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cam/v20190116"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func DataSourceTencentCloudCamRoleDetail() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudCamRoleDetailRead,
		Schema: map[string]*schema.Schema{
			"role_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Role ID, used to specify role. Input either `RoleId` or `RoleName`.",
			},

			"role_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Role name, used to specify role. Input either `RoleId` or `RoleName`.",
			},

			"role_info": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Role details.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"role_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Role ID.",
						},
						"role_name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Role name.",
						},
						"policy_document": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Role policy document.",
						},
						"description": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Role description.",
						},
						"add_time": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Time role created.",
						},
						"update_time": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Time role last updated.",
						},
						"console_login": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "If login is allowed for the role.",
						},
						"role_type": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "User role. Valid values: `user`, `system`, `service_linked`\nNote: this field may return null, indicating that no valid values can be obtained.",
						},
						"session_duration": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Valid period\nNote: this field may return null, indicating that no valid values can be obtained.",
						},
						"deletion_task_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Task identifier for deleting a service-linked role \nNote: this field may return null, indicating that no valid values can be obtained.",
						},
						"tags": {
							Type:        schema.TypeList,
							Required:    true,
							Description: "Tags.\nNote: This field may return `null`, indicating that no valid values can be obtained.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"key": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Tag key.",
									},
									"value": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Tag value.",
									},
								},
							},
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudCamRoleDetailRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_cam_role_detail.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := CamService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	if v, ok := d.GetOk("role_id"); ok {
		paramMap["RoleId"] = helper.String(v.(string))
	}

	if v, ok := d.GetOk("role_name"); ok {
		paramMap["RoleName"] = helper.String(v.(string))
	}

	var respData *camv20190116.GetRoleResponseParams
	err := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeCamRoleDetailByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if err != nil {
		return err
	}

	var roleId string
	roleInfoMap := map[string]interface{}{}

	if respData.RoleInfo != nil {
		if respData.RoleInfo.RoleId != nil {
			roleInfoMap["role_id"] = respData.RoleInfo.RoleId
			roleId = *respData.RoleInfo.RoleId
		}

		if respData.RoleInfo.RoleName != nil {
			roleInfoMap["role_name"] = respData.RoleInfo.RoleName
		}

		if respData.RoleInfo.PolicyDocument != nil {
			roleInfoMap["policy_document"] = respData.RoleInfo.PolicyDocument
		}

		if respData.RoleInfo.Description != nil {
			roleInfoMap["description"] = respData.RoleInfo.Description
		}

		if respData.RoleInfo.AddTime != nil {
			roleInfoMap["add_time"] = respData.RoleInfo.AddTime
		}

		if respData.RoleInfo.UpdateTime != nil {
			roleInfoMap["update_time"] = respData.RoleInfo.UpdateTime
		}

		if respData.RoleInfo.ConsoleLogin != nil {
			roleInfoMap["console_login"] = respData.RoleInfo.ConsoleLogin
		}

		if respData.RoleInfo.RoleType != nil {
			roleInfoMap["role_type"] = respData.RoleInfo.RoleType
		}

		if respData.RoleInfo.SessionDuration != nil {
			roleInfoMap["session_duration"] = respData.RoleInfo.SessionDuration
		}

		if respData.RoleInfo.DeletionTaskId != nil {
			roleInfoMap["deletion_task_id"] = respData.RoleInfo.DeletionTaskId
		}

		tagsList := make([]map[string]interface{}, 0, len(respData.RoleInfo.Tags))
		if respData.RoleInfo.Tags != nil {
			for _, tags := range respData.RoleInfo.Tags {
				tagsMap := map[string]interface{}{}

				if tags.Key != nil {
					tagsMap["key"] = tags.Key
				}

				if tags.Value != nil {
					tagsMap["value"] = tags.Value
				}

				tagsList = append(tagsList, tagsMap)
			}

			roleInfoMap["tags"] = tagsList
		}
		_ = d.Set("role_info", []interface{}{roleInfoMap})
	}

	d.SetId(roleId)

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), roleInfoMap); e != nil {
			return e
		}
	}

	return nil
}
