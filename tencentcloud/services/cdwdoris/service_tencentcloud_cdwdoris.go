// Code generated by iacg; DO NOT EDIT.
package cdwdoris

import (
	"context"
	"log"

	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"

	cdwdorisv20211228 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cdwdoris/v20211228"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/connectivity"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/ratelimit"
)

func NewCdwdorisService(client *connectivity.TencentCloudClient) CdwdorisService {
	return CdwdorisService{client: client}
}

type CdwdorisService struct {
	client *connectivity.TencentCloudClient
}

func (me *CdwdorisService) DescribeCdwdorisInstanceById(ctx context.Context, instanceId string) (ret *cdwdorisv20211228.InstanceInfo, errRet error) {
	logId := tccommon.GetLogId(ctx)

	request := cdwdorisv20211228.NewDescribeInstanceRequest()
	request.InstanceId = &instanceId

	defer func() {
		if errRet != nil {
			log.Printf("[CRITAL]%s api[%s] fail, request body [%s], reason[%s]\n", logId, request.GetAction(), request.ToJsonString(), errRet.Error())
		}
	}()

	ratelimit.Check(request.GetAction())

	response, err := me.client.UseCdwdorisV20211228Client().DescribeInstance(request)
	if err != nil {
		errRet = err
		return
	}

	log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), response.ToJsonString())

	if response.Response == nil {
		return
	}

	ret = response.Response.InstanceInfo
	return
}

func (me *CdwdorisService) DescribeCdwdorisInstanceById1(ctx context.Context) (ret *cdwdorisv20211228.DescribeInstanceStateResponseParams, errRet error) {
	logId := tccommon.GetLogId(ctx)

	request := cdwdorisv20211228.NewDescribeInstanceStateRequest()

	defer func() {
		if errRet != nil {
			log.Printf("[CRITAL]%s api[%s] fail, request body [%s], reason[%s]\n", logId, request.GetAction(), request.ToJsonString(), errRet.Error())
		}
	}()

	ratelimit.Check(request.GetAction())

	response, err := me.client.UseCdwdorisV20211228Client().DescribeInstanceState(request)
	if err != nil {
		errRet = err
		return
	}
	log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), response.ToJsonString())

	ret = response.Response
	return
}

func (me *CdwdorisService) DescribeCdwdorisInstanceById2(ctx context.Context) (ret *cdwdorisv20211228.DescribeInstanceOperationsResponseParams, errRet error) {
	logId := tccommon.GetLogId(ctx)

	request := cdwdorisv20211228.NewDescribeInstanceOperationsRequest()

	defer func() {
		if errRet != nil {
			log.Printf("[CRITAL]%s api[%s] fail, request body [%s], reason[%s]\n", logId, request.GetAction(), request.ToJsonString(), errRet.Error())
		}
	}()

	ratelimit.Check(request.GetAction())

	response, err := me.client.UseCdwdorisV20211228Client().DescribeInstanceOperations(request)
	if err != nil {
		errRet = err
		return
	}
	log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), response.ToJsonString())

	ret = response.Response
	return
}

func (me *CdwdorisService) DescribeCdwdorisWorkloadGroupById(ctx context.Context, instanceId, workloadGroupName string) (workloadGroupConfig *cdwdorisv20211228.WorkloadGroupConfig, errRet error) {
	logId := tccommon.GetLogId(ctx)

	request := cdwdorisv20211228.NewDescribeWorkloadGroupRequest()
	request.InstanceId = helper.String(instanceId)

	defer func() {
		if errRet != nil {
			log.Printf("[CRITAL]%s api[%s] fail, request body [%s], reason[%s]\n", logId, request.GetAction(), request.ToJsonString(), errRet.Error())
		}
	}()

	ratelimit.Check(request.GetAction())

	response, err := me.client.UseCdwdorisV20211228Client().DescribeWorkloadGroup(request)
	if err != nil {
		errRet = err
		return
	}

	log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), response.ToJsonString())

	if response == nil || len(response.Response.WorkloadGroups) == 0 {
		return
	}

	for _, item := range response.Response.WorkloadGroups {
		if *item.WorkloadGroupName == workloadGroupName {
			workloadGroupConfig = item
			return
		}
	}

	return
}

func (me *CdwdorisService) DescribeCdwdorisWorkloadGroupsById(ctx context.Context, instanceId string) (workloadGroup *cdwdorisv20211228.DescribeWorkloadGroupResponseParams, errRet error) {
	logId := tccommon.GetLogId(ctx)

	request := cdwdorisv20211228.NewDescribeWorkloadGroupRequest()
	request.InstanceId = helper.String(instanceId)

	defer func() {
		if errRet != nil {
			log.Printf("[CRITAL]%s api[%s] fail, request body [%s], reason[%s]\n", logId, request.GetAction(), request.ToJsonString(), errRet.Error())
		}
	}()

	ratelimit.Check(request.GetAction())

	response, err := me.client.UseCdwdorisV20211228Client().DescribeWorkloadGroup(request)
	if err != nil {
		errRet = err
		return
	}

	log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), response.ToJsonString())

	if response == nil {
		return
	}

	workloadGroup = response.Response

	return
}

func (me *CdwdorisService) DescribeCdwdorisSqlApiById(ctx context.Context, instanceId, userName string) (workloadGroupConfig *cdwdorisv20211228.WorkloadGroupConfig, errRet error) {
	//logId := tccommon.GetLogId(ctx)

	//request := cdwdorisv20211228.NewDescribeSqlApisRequest()
	//request.InstanceId = helper.String(instanceId)
	//request.ApiType = helper.String("GetUsers")
	//request.UserName = helper.String(userName)
	//
	//defer func() {
	//	if errRet != nil {
	//		log.Printf("[CRITAL]%s api[%s] fail, request body [%s], reason[%s]\n", logId, request.GetAction(), request.ToJsonString(), errRet.Error())
	//	}
	//}()
	//
	//ratelimit.Check(request.GetAction())
	//
	//response, err := me.client.UseCdwdorisV20211228Client().DescribeSqlApis(request)
	//if err != nil {
	//	errRet = err
	//	return
	//}
	//
	//log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), response.ToJsonString())
	//
	//if response == nil || len(response.Response.) == 0 {
	//	return
	//}
	//
	//for _, item := range response.Response.WorkloadGroups {
	//	if *item.WorkloadGroupName == workloadGroupName {
	//		workloadGroupConfig = item
	//		return
	//	}
	//}

	return
}

func (me *CdwdorisService) DescribeCdwdorisInstancesByFilter(ctx context.Context, param map[string]interface{}) (ret []*cdwdorisv20211228.InstanceInfo, errRet error) {
	var (
		logId   = tccommon.GetLogId(ctx)
		request = cdwdorisv20211228.NewDescribeInstancesRequest()
	)

	defer func() {
		if errRet != nil {
			log.Printf("[CRITAL]%s api[%s] fail, request body [%s], reason[%s]\n", logId, request.GetAction(), request.ToJsonString(), errRet.Error())
		}
	}()

	for k, v := range param {
		if k == "SearchInstanceId" {
			request.SearchInstanceId = v.(*string)
		}

		if k == "SearchInstanceName" {
			request.SearchInstanceName = v.(*string)
		}

		if k == "SearchTags" {
			request.SearchTags = v.([]*cdwdorisv20211228.SearchTags)
		}
	}

	var (
		offset int64 = 0
		limit  int64 = 10
	)

	for {
		request.Offset = &offset
		request.Limit = &limit
		ratelimit.Check(request.GetAction())
		response, err := me.client.UseCdwdorisV20211228Client().DescribeInstances(request)
		if err != nil {
			errRet = err
			return
		}

		log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), response.ToJsonString())

		if response == nil || len(response.Response.InstancesList) < 1 {
			break
		}

		ret = append(ret, response.Response.InstancesList...)
		if len(response.Response.InstancesList) < int(limit) {
			break
		}

		offset += limit
	}

	return
}
