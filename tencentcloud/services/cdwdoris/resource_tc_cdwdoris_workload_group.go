// Code generated by iacg; DO NOT EDIT.
package cdwdoris

import (
	"context"
	"fmt"
	"log"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	cdwdorisv20211228 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cdwdoris/v20211228"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudCdwdorisWorkloadGroup() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudCdwdorisWorkloadGroupCreate,
		Read:   resourceTencentCloudCdwdorisWorkloadGroupRead,
		Update: resourceTencentCloudCdwdorisWorkloadGroupUpdate,
		Delete: resourceTencentCloudCdwdorisWorkloadGroupDelete,
		Schema: map[string]*schema.Schema{
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Instance id",
			},

			"workload_group": {
				Type:        schema.TypeList,
				Optional:    true,
				MaxItems:    1,
				Description: "Resource group configuration",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"workload_group_name": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Workload group name\nNote: This field may return null, indicating that no valid value can be obtained.",
						},
						"cpu_share": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "CPU weight\nNote: This field may return null, indicating that no valid value can be obtained.",
						},
						"memory_limit": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "Memory limit, the sum of the memory limit values of all resource groups should be less than or equal to 100\nNote: This field may return null, indicating that no valid value can be obtained.",
						},
						"enable_memory_over_commit": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Whether to allow over-allocation\nNote: This field may return null, indicating that no valid value can be obtained.",
						},
						"cpu_hard_limit": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Cpu hard limit\nNote: This field may return null, indicating that no valid value can be obtained.",
						},
					},
				},
			},
		},
	}
}

func resourceTencentCloudCdwdorisWorkloadGroupCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cdwdoris_workload_group.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		instanceId string
	)
	var (
		request  = cdwdorisv20211228.NewCreateWorkloadGroupRequest()
		response = cdwdorisv20211228.NewCreateWorkloadGroupResponse()
	)

	if v, ok := d.GetOk("instance_id"); ok {
		request.InstanceId = helper.String(v.(string))
	}

	if workloadGroupMap, ok := helper.InterfacesHeadMap(d, "workload_group"); ok {
		workloadGroupConfig := cdwdorisv20211228.WorkloadGroupConfig{}
		if v, ok := workloadGroupMap["workload_group_name"]; ok {
			workloadGroupConfig.WorkloadGroupName = helper.String(v.(string))
		}
		if v, ok := workloadGroupMap["cpu_share"]; ok {
			workloadGroupConfig.CpuShare = helper.IntInt64(v.(int))
		}
		if v, ok := workloadGroupMap["memory_limit"]; ok {
			workloadGroupConfig.MemoryLimit = helper.IntInt64(v.(int))
		}
		if v, ok := workloadGroupMap["enable_memory_over_commit"]; ok {
			workloadGroupConfig.EnableMemoryOverCommit = helper.Bool(v.(bool))
		}
		if v, ok := workloadGroupMap["cpu_hard_limit"]; ok {
			workloadGroupConfig.CpuHardLimit = helper.String(v.(string))
		}
		request.WorkloadGroup = &workloadGroupConfig
	}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCdwdorisV20211228Client().CreateWorkloadGroupWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create cdwdoris workload group failed, reason:%+v", logId, err)
		return err
	}

	instanceId = *response.Response.InstanceId

	d.SetId(instanceId)

	return resourceTencentCloudCdwdorisWorkloadGroupRead(d, meta)
}

func resourceTencentCloudCdwdorisWorkloadGroupRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cdwdoris_workload_group.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := CdwdorisService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	instanceId := d.Id()

	respData, err := service.DescribeCdwdorisWorkloadGroupById(ctx, instanceId)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `cdwdoris_workload_group` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}
	workloadGroupsList := make([]map[string]interface{}, 0, len(respData.WorkloadGroups))
	if respData.WorkloadGroups != nil {
		for _, workloadGroups := range respData.WorkloadGroups {
			workloadGroupsMap := map[string]interface{}{}

			if workloadGroups.WorkloadGroupName != nil {
				workloadGroupsMap["workload_group_name"] = workloadGroups.WorkloadGroupName
			}

			if workloadGroups.CpuShare != nil {
				workloadGroupsMap["cpu_share"] = workloadGroups.CpuShare
			}

			if workloadGroups.MemoryLimit != nil {
				workloadGroupsMap["memory_limit"] = workloadGroups.MemoryLimit
			}

			if workloadGroups.EnableMemoryOverCommit != nil {
				workloadGroupsMap["enable_memory_over_commit"] = workloadGroups.EnableMemoryOverCommit
			}

			if workloadGroups.CpuHardLimit != nil {
				workloadGroupsMap["cpu_hard_limit"] = workloadGroups.CpuHardLimit
			}

			workloadGroupsList = append(workloadGroupsList, workloadGroupsMap)
		}

		_ = d.Set("workload_groups", workloadGroupsList)
	}

	if respData.Status != nil {
		_ = d.Set("status", respData.Status)
	}

	if respData.ErrorMsg != nil {
		_ = d.Set("error_msg", respData.ErrorMsg)
	}

	respData1, err := service.DescribeCdwdorisWorkloadGroupById1(ctx, instanceId)
	if err != nil {
		return err
	}

	if respData1 == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `cdwdoris_workload_group` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}
	userBindInfosList := make([]map[string]interface{}, 0, len(respData1.UserBindInfos))
	if respData1.UserBindInfos != nil {
		for _, userBindInfos := range respData1.UserBindInfos {
			userBindInfosMap := map[string]interface{}{}

			if userBindInfos.UserName != nil {
				userBindInfosMap["user_name"] = userBindInfos.UserName
			}

			if userBindInfos.WorkloadGroupName != nil {
				userBindInfosMap["workload_group_name"] = userBindInfos.WorkloadGroupName
			}

			userBindInfosList = append(userBindInfosList, userBindInfosMap)
		}

		_ = d.Set("user_bind_infos", userBindInfosList)
	}

	if respData1.ErrorMsg != nil {
		_ = d.Set("error_msg", respData1.ErrorMsg)
	}

	return nil
}

func resourceTencentCloudCdwdorisWorkloadGroupUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cdwdoris_workload_group.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	immutableArgs := []string{"instance_id"}
	for _, v := range immutableArgs {
		if d.HasChange(v) {
			return fmt.Errorf("argument `%s` cannot be changed", v)
		}
	}
	instanceId := d.Id()

	needChange := false
	mutableArgs := []string{"workload_group"}
	for _, v := range mutableArgs {
		if d.HasChange(v) {
			needChange = true
			break
		}
	}

	if needChange {
		request := cdwdorisv20211228.NewModifyWorkloadGroupRequest()

		request.InstanceId = helper.String(instanceId)

		if workloadGroupMap, ok := helper.InterfacesHeadMap(d, "workload_group"); ok {
			workloadGroupConfig := cdwdorisv20211228.WorkloadGroupConfig{}
			if v, ok := workloadGroupMap["workload_group_name"]; ok {
				workloadGroupConfig.WorkloadGroupName = helper.String(v.(string))
			}
			if v, ok := workloadGroupMap["cpu_share"]; ok {
				workloadGroupConfig.CpuShare = helper.IntInt64(v.(int))
			}
			if v, ok := workloadGroupMap["memory_limit"]; ok {
				workloadGroupConfig.MemoryLimit = helper.IntInt64(v.(int))
			}
			if v, ok := workloadGroupMap["enable_memory_over_commit"]; ok {
				workloadGroupConfig.EnableMemoryOverCommit = helper.Bool(v.(bool))
			}
			if v, ok := workloadGroupMap["cpu_hard_limit"]; ok {
				workloadGroupConfig.CpuHardLimit = helper.String(v.(string))
			}
			request.WorkloadGroup = &workloadGroupConfig
		}

		err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCdwdorisV20211228Client().ModifyWorkloadGroupWithContext(ctx, request)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
			}
			return nil
		})
		if err != nil {
			log.Printf("[CRITAL]%s update cdwdoris workload group failed, reason:%+v", logId, err)
			return err
		}
	}

	return resourceTencentCloudCdwdorisWorkloadGroupRead(d, meta)
}

func resourceTencentCloudCdwdorisWorkloadGroupDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cdwdoris_workload_group.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	instanceId := d.Id()

	var (
		request  = cdwdorisv20211228.NewDeleteWorkloadGroupRequest()
		response = cdwdorisv20211228.NewDeleteWorkloadGroupResponse()
	)

	request.InstanceId = helper.String(instanceId)

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCdwdorisV20211228Client().DeleteWorkloadGroupWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s delete cdwdoris workload group failed, reason:%+v", logId, err)
		return err
	}

	_ = response
	return nil
}
