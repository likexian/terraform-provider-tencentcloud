// Code generated by iacg; DO NOT EDIT.
package cdwdoris

import (
	"context"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	cdwdorisv20211228 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cdwdoris/v20211228"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudCdwdorisUser() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudCdwdorisUserCreate,
		Read:   resourceTencentCloudCdwdorisUserRead,
		Delete: resourceTencentCloudCdwdorisUserDelete,
		Schema: map[string]*schema.Schema{
			"user_info": {
				Type:        schema.TypeList,
				Required:    true,
				MaxItems:    1,
				Description: "User info.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"instance_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Instance ID.",
						},
						"username": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "User name.",
						},
						"password": {
							Type:        schema.TypeString,
							Required:    true,
							Sensitive:   true,
							Description: "Password.",
						},
						"white_host": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "The IP the user linked from.",
						},
						"describe": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Describe.",
						},
						"cam_uin": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "The bound sub user uin.",
						},
						"cam_ranger_group_ids": {
							Type:        schema.TypeList,
							Optional:    true,
							Elem:        &schema.Schema{Type: schema.TypeInt},
							Description: "Ranger group id list.",
						},
					},
				},
			},
			"api_type": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "api type",
			},
			"user_privilege": {
				Type:        schema.TypeInt,
				Optional:    true,
				ForceNew:    true,
				Description: "User permission type. 0: Ordinary user; 1: Administrator",
			},
		},
	}
}

func resourceTencentCloudCdwdorisUserCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cdwdoris_user.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	var (
		logId      = tccommon.GetLogId(tccommon.ContextNil)
		ctx        = tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)
		request    = cdwdorisv20211228.NewActionAlterUserRequest()
		instanceId string
		userName   string
	)

	if userInfoMap, ok := helper.InterfacesHeadMap(d, "user_info"); ok {
		userInfo := cdwdorisv20211228.UserInfo{}
		if v, ok := userInfoMap["instance_id"]; ok {
			userInfo.InstanceId = helper.String(v.(string))
			instanceId = v.(string)
		}

		if v, ok := userInfoMap["username"]; ok {
			userInfo.UserName = helper.String(v.(string))
			userName = v.(string)
		}

		if v, ok := userInfoMap["password"]; ok {
			userInfo.PassWord = helper.String(v.(string))
		}

		if v, ok := userInfoMap["white_host"]; ok {
			userInfo.WhiteHost = helper.String(v.(string))
		}

		if v, ok := userInfoMap["describe"]; ok {
			userInfo.Describe = helper.String(v.(string))
		}

		if v, ok := userInfoMap["cam_uin"]; ok {
			userInfo.CamUin = helper.String(v.(string))
		}

		request.UserInfo = &userInfo
	}

	if v, ok := d.GetOk("api_type"); ok {
		request.ApiType = helper.String(v.(string))
	}

	if v, ok := d.GetOkExists("user_privilege"); ok {
		request.UserPrivilege = helper.IntInt64(v.(int))
	}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCdwdorisV20211228Client().ActionAlterUserWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}

		return nil
	})

	if err != nil {
		log.Printf("[CRITAL]%s create cdwdoris user failed, reason:%+v", logId, err)
		return err
	}

	d.SetId(strings.Join([]string{instanceId, userName}, tccommon.FILED_SP))

	return resourceTencentCloudCdwdorisUserRead(d, meta)
}

func resourceTencentCloudCdwdorisUserRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cdwdoris_user.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	return nil
}

func resourceTencentCloudCdwdorisUserDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cdwdoris_user.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	return nil
}
