// Code generated by iacg; DO NOT EDIT.
package thpc

import (
	"context"
	"fmt"
	"log"

	cvm "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cvm/v20170312"

	svccbs "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/services/cbs"

	svccvm "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/services/cvm"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	thpcv20230321 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/thpc/v20230321"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudThpcWorkspaces() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudThpcWorkspacesCreate,
		Read:   resourceTencentCloudThpcWorkspacesRead,
		Update: resourceTencentCloudThpcWorkspacesUpdate,
		Delete: resourceTencentCloudThpcWorkspacesDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"client_token": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "A string used to ensure the idempotence of the request. This string is generated by the customer and must be unique across different requests, with a maximum length of 64 ASCII characters. If this parameter is not specified, the idempotence of the request cannot be guaranteed. Example value: system-f3827db9-c58a-49cc-bf10-33fc1923a34a.",
			},
			"placement": {
				Type:        schema.TypeList,
				Optional:    true,
				MaxItems:    1,
				Description: "The position of the instance. This parameter allows you to specify attributes such as the availability zone, project, and host machine (when creating a sub-instance on CDH) that the instance belongs to. Note: If you do not specify the LaunchTemplate parameter, Placement is a mandatory parameter. If both Placement and LaunchTemplate are passed, the values in Placement override the corresponding values in LaunchTemplate by default.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"zone": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "The available zone for the CVM instance.",
						},
						"project_id": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "The project the instance belongs to, default to 0.",
						},
					},
				},
			},
			"space_charge_prepaid": {
				Type:        schema.TypeList,
				Optional:    true,
				MaxItems:    1,
				Description: "Prepaid mode: This refers to the parameters related to the annual and monthly subscription. By this parameter, you can specify the purchase duration of the prepaid instances, whether to set auto-renewal, and other attributes. If the instance's billing mode is prepaid, this parameter is required.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"period": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "The tenancy (time unit is month) of the prepaid instance, NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`, `48`, `60`.",
						},
						"renew_flag": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.",
						},
					},
				},
			},
			"space_charge_type": {
				Type:         schema.TypeString,
				Optional:     true,
				ValidateFunc: tccommon.ValidateAllowedStringValue(SPACE_CHARGE_TYPE),
				Description:  "Workspace billing type.",
			},
			"space_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Workspace specifications.",
			},
			"image_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Image ID.",
			},
			"system_disk": {
				Type:        schema.TypeList,
				Optional:    true,
				MaxItems:    1,
				Description: "Workspace system disk information.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"disk_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "System disk snapshot ID used to initialize the system disk. When system disk type is `LOCAL_BASIC` and `LOCAL_SSD`, disk id is not supported.",
						},
						"disk_type": {
							Type:         schema.TypeString,
							Optional:     true,
							ValidateFunc: tccommon.ValidateAllowedStringValue(SYSTEM_DISK_TYPE),
							Description:  "System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_BASIC`: cloud disk, `CLOUD_SSD`: cloud SSD disk, `CLOUD_PREMIUM`: Premium Cloud Storage, `CLOUD_BSSD`: Basic SSD, `CLOUD_HSSD`: Enhanced SSD, `CLOUD_TSSD`: Tremendous SSD. NOTE: If modified, the instance may force stop.",
						},
						"disk_size": {
							Type:        schema.TypeInt,
							Optional:    true,
							Computed:    true,
							Description: "Size of the system disk. unit is GB, Default is 50GB.",
						},
					},
				},
			},
			"data_disks": {
				Type:        schema.TypeList,
				Optional:    true,
				Computed:    true,
				Description: "Workspace data disk information.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"disk_type": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Data disk type. For more information about limits on different data disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: LOCAL_BASIC: local disk, LOCAL_SSD: local SSD disk, LOCAL_NVME: local NVME disk, specified in the InstanceType, LOCAL_PRO: local HDD disk, specified in the InstanceType, CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD, CLOUD_BSSD: Balanced SSD.",
						},
						"disk_id": {
							Type:        schema.TypeString,
							Optional:    true,
							Computed:    true,
							Description: "Data disk ID used to initialize the data disk. When data disk type is `LOCAL_BASIC` and `LOCAL_SSD`, disk id is not supported.",
						},
						"disk_size": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "Size of the data disk, and unit is GB.",
						},
						"delete_with_instance": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Decides whether the disk is deleted with instance(only applied to `CLOUD_BASIC`, `CLOUD_SSD` and `CLOUD_PREMIUM` disk with `POSTPAID_BY_HOUR` instance), Default is true.",
						},
						"snapshot_id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Snapshot ID of the data disk. The selected data disk snapshot size must be smaller than the data disk size.",
						},
						"encrypt": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Decides whether the disk is encrypted. Default is `false`.",
						},
						"kms_key_id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Kms key ID.",
						},
						"throughput_performance": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.",
						},
						"burst_performance": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Sudden performance. PS: During testing.",
						},
					},
				},
			},
			"virtual_private_cloud": {
				Type:        schema.TypeList,
				Optional:    true,
				MaxItems:    1,
				Description: "VPC related information.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"vpc_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "The ID of a VPC network. If you want to create instances in a VPC network, this parameter must be set.",
						},
						"subnet_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "The ID of a VPC subnet. If you want to create instances in a VPC network, this parameter must be set.",
						},
						"as_vpc_gateway": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Is it used as a public network gateway.",
						},
						"private_ip_addresses": {
							Type:        schema.TypeSet,
							Optional:    true,
							Computed:    true,
							Description: "Array of private ip address.",
							Elem:        &schema.Schema{Type: schema.TypeString},
						},
						"ipv6_address_count": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "IPV6 address count.",
						},
					},
				},
			},
			"internet_accessible": {
				Type:        schema.TypeList,
				Optional:    true,
				Computed:    true,
				MaxItems:    1,
				Description: "Public network bandwidth settings.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"internet_charge_type": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Internet charge type of the instance, Valid values are `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR`, `BANDWIDTH_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`. If not set, internet charge type are consistent with the cvm charge type by default. This value takes NO Effect when changing and does not need to be set when `allocate_public_ip` is false.",
						},
						"internet_max_bandwidth_out": {
							Type:        schema.TypeInt,
							Optional:    true,
							Computed:    true,
							Description: "Maximum outgoing bandwidth to the public network, measured in Mbps (Mega bits per second). This value does not need to be set when `allocate_public_ip` is false.",
						},
						"public_ip_assigned": {
							Type:        schema.TypeBool,
							Optional:    true,
							Computed:    true,
							Description: "Associate a public IP address with an instance in a VPC or Classic. Boolean value, Default is false.",
						},
						"bandwidth_package_id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.",
						},
					},
				},
			},
			"space_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: "Workspace Display Name.",
			},
			"login_settings": {
				Type:        schema.TypeList,
				Optional:    true,
				MaxItems:    1,
				Description: "Workspace Login Settings.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"password": {
							Type:        schema.TypeString,
							Optional:    true,
							Sensitive:   true,
							Description: "Password for the instance. In order for the new password to take effect, the instance will be restarted after the password change. Modifying will cause the instance reset.",
						},
						"key_ids": {
							Type:        schema.TypeSet,
							Optional:    true,
							Description: "The key pair to use for the instance, it looks like `skey-16jig7tx`. Modifying will cause the instance reset.",
							Elem:        &schema.Schema{Type: schema.TypeString},
						},
					},
				},
			},
			"security_group_ids": {
				Type:        schema.TypeSet,
				Optional:    true,
				Computed:    true,
				Description: "Workspace Security Group.",
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"enhanced_service": {
				Type:        schema.TypeList,
				Optional:    true,
				MaxItems:    1,
				Description: "Enhanced Services.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"security_service": {
							Type:        schema.TypeList,
							Optional:    true,
							MaxItems:    1,
							Description: "Activate cloud security services. If this parameter is not specified, cloud security services will be enabled by default.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "Whether to enable.",
									},
								},
							},
						},
						"monitor_service": {
							Type:        schema.TypeList,
							Optional:    true,
							MaxItems:    1,
							Description: "Activate Tencent Cloud Observable Platform service. If this parameter is not specified, the Tencent Cloud Observable Platform service will be enabled by default.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "Whether to enable.",
									},
								},
							},
						},
						"automation_service": {
							Type:        schema.TypeList,
							Optional:    true,
							MaxItems:    1,
							Description: "Enable the TencentCloud Automation Tools (TAT) service. If this parameter is not specified, the cloud automation tools service will be enabled by default.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "Whether to enable.",
									},
								},
							},
						},
					},
				},
			},
			"user_data": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "User Data for Workspace.",
			},
			"disaster_recover_group_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Placement Group ID.",
			},
			"tag_specification": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "Tag Description List.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"tags": {
							Type:        schema.TypeList,
							Required:    true,
							Description: "tags.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"key": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Tag key.",
									},
									"value": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "Tag value.",
									},
								},
							},
						},
					},
				},
			},
			"hpc_cluster_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Hyper Computing Cluster ID.",
			},
			"cam_role_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "CAM role name authorized to access.",
			},
			"host_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "The hostname of the instance. Windows instance: The name should be a combination of 2 to 15 characters comprised of letters (case insensitive), numbers, and hyphens (-). Period (.) is not supported, and the name cannot be a string of pure numbers. Other types (such as Linux) of instances: The name should be a combination of 2 to 60 characters, supporting multiple periods (.). The piece between two periods is composed of letters (case insensitive), numbers, and hyphens (-). Modifying will cause the instance reset.",
			},
			// computed
			"resource_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "CVM instance ID.",
			},
		},
	}
}

func resourceTencentCloudThpcWorkspacesCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_thpc_workspaces.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	var (
		logId    = tccommon.GetLogId(tccommon.ContextNil)
		ctx      = tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)
		request  = thpcv20230321.NewCreateWorkspacesRequest()
		response = thpcv20230321.NewCreateWorkspacesResponse()
	)

	if v, ok := d.GetOk("client_token"); ok {
		request.ClientToken = helper.String(v.(string))
	}

	if placementMap, ok := helper.InterfacesHeadMap(d, "placement"); ok {
		spacePlacement := thpcv20230321.SpacePlacement{}
		if v, ok := placementMap["zone"]; ok && v != "" {
			spacePlacement.Zone = helper.String(v.(string))
		}

		if v, ok := placementMap["project_id"]; ok {
			spacePlacement.ProjectId = helper.IntUint64(v.(int))
		}

		request.Placement = &spacePlacement
	}

	if spaceChargePrepaidMap, ok := helper.InterfacesHeadMap(d, "space_charge_prepaid"); ok {
		spaceChargePrepaid := thpcv20230321.SpaceChargePrepaid{}
		if v, ok := spaceChargePrepaidMap["period"]; ok {
			spaceChargePrepaid.Period = helper.IntInt64(v.(int))
		}

		if v, ok := spaceChargePrepaidMap["renew_flag"]; ok && v != "" {
			spaceChargePrepaid.RenewFlag = helper.String(v.(string))
		}

		request.SpaceChargePrepaid = &spaceChargePrepaid
	}

	if v, ok := d.GetOk("space_charge_type"); ok {
		request.SpaceChargeType = helper.String(v.(string))
	}

	if v, ok := d.GetOk("space_type"); ok {
		request.SpaceType = helper.String(v.(string))
	}

	if v, ok := d.GetOk("image_id"); ok {
		request.ImageId = helper.String(v.(string))
	}

	if systemDiskMap, ok := helper.InterfacesHeadMap(d, "system_disk"); ok {
		spaceSystemDisk := thpcv20230321.SpaceSystemDisk{}
		if v, ok := systemDiskMap["disk_type"]; ok && v != "" {
			spaceSystemDisk.DiskType = helper.String(v.(string))
		}

		if v, ok := systemDiskMap["disk_size"]; ok && v != "" {
			spaceSystemDisk.DiskSize = helper.IntInt64(v.(int))
		}

		request.SystemDisk = &spaceSystemDisk
	}

	if v, ok := d.GetOk("data_disks"); ok {
		for _, item := range v.([]interface{}) {
			dataDisksMap := item.(map[string]interface{})
			spaceDataDisk := thpcv20230321.SpaceDataDisk{}
			if v, ok := dataDisksMap["disk_type"]; ok && v != "" {
				spaceDataDisk.DiskType = helper.String(v.(string))
			}

			if v, ok := dataDisksMap["disk_id"]; ok && v != "" {
				spaceDataDisk.DiskId = helper.String(v.(string))
			}

			if v, ok := dataDisksMap["disk_size"]; ok {
				spaceDataDisk.DiskSize = helper.IntInt64(v.(int))
			}

			if v, ok := dataDisksMap["delete_with_instance"]; ok {
				spaceDataDisk.DeleteWithInstance = helper.Bool(v.(bool))
			}

			if v, ok := dataDisksMap["snapshot_id"]; ok && v != "" {
				spaceDataDisk.SnapshotId = helper.String(v.(string))
			}

			if v, ok := dataDisksMap["encrypt"]; ok {
				spaceDataDisk.Encrypt = helper.Bool(v.(bool))
			}

			if v, ok := dataDisksMap["kms_key_id"]; ok {
				spaceDataDisk.KmsKeyId = helper.String(v.(string))
			}

			if v, ok := dataDisksMap["throughput_performance"]; ok {
				spaceDataDisk.ThroughputPerformance = helper.IntInt64(v.(int))
			}

			if v, ok := dataDisksMap["burst_performance"]; ok {
				spaceDataDisk.BurstPerformance = helper.Bool(v.(bool))
			}

			request.DataDisks = append(request.DataDisks, &spaceDataDisk)
		}
	}

	if virtualPrivateCloudMap, ok := helper.InterfacesHeadMap(d, "virtual_private_cloud"); ok {
		spaceVirtualPrivateCloud := thpcv20230321.SpaceVirtualPrivateCloud{}
		if v, ok := virtualPrivateCloudMap["vpc_id"]; ok && v != "" {
			spaceVirtualPrivateCloud.VpcId = helper.String(v.(string))
		}

		if v, ok := virtualPrivateCloudMap["subnet_id"]; ok && v != "" {
			spaceVirtualPrivateCloud.SubnetId = helper.String(v.(string))
		}

		if v, ok := virtualPrivateCloudMap["as_vpc_gateway"]; ok {
			spaceVirtualPrivateCloud.AsVpcGateway = helper.Bool(v.(bool))
		}

		if v, ok := virtualPrivateCloudMap["private_ip_addresses"]; ok {
			privateIpAddressesSet := v.(*schema.Set).List()
			for i := range privateIpAddressesSet {
				privateIpAddresses := privateIpAddressesSet[i].(string)
				spaceVirtualPrivateCloud.PrivateIpAddresses = append(spaceVirtualPrivateCloud.PrivateIpAddresses, helper.String(privateIpAddresses))
			}
		}

		if v, ok := virtualPrivateCloudMap["ipv6_address_count"]; ok {
			spaceVirtualPrivateCloud.Ipv6AddressCount = helper.IntUint64(v.(int))
		}

		request.VirtualPrivateCloud = &spaceVirtualPrivateCloud
	}

	if internetAccessibleMap, ok := helper.InterfacesHeadMap(d, "internet_accessible"); ok {
		spaceInternetAccessible := thpcv20230321.SpaceInternetAccessible{}
		if v, ok := internetAccessibleMap["internet_charge_type"]; ok && v != "" {
			spaceInternetAccessible.InternetChargeType = helper.String(v.(string))
		}

		if v, ok := internetAccessibleMap["internet_max_bandwidth_out"]; ok {
			spaceInternetAccessible.InternetMaxBandwidthOut = helper.IntInt64(v.(int))
		}

		if v, ok := internetAccessibleMap["public_ip_assigned"]; ok {
			spaceInternetAccessible.PublicIpAssigned = helper.Bool(v.(bool))
		}

		if v, ok := internetAccessibleMap["bandwidth_package_id"]; ok && v != "" {
			spaceInternetAccessible.BandwidthPackageId = helper.String(v.(string))
		}

		request.InternetAccessible = &spaceInternetAccessible
	}

	if v, ok := d.GetOkExists("space_count"); ok {
		request.SpaceCount = helper.IntInt64(v.(int))
	}

	if v, ok := d.GetOk("space_name"); ok {
		request.SpaceName = helper.String(v.(string))
	}

	if loginSettingsMap, ok := helper.InterfacesHeadMap(d, "login_settings"); ok {
		loginSettings := thpcv20230321.LoginSettings{}
		if v, ok := loginSettingsMap["password"]; ok && v != "" {
			loginSettings.Password = helper.String(v.(string))
		}

		if v, ok := loginSettingsMap["key_ids"]; ok {
			keyIdsSet := v.(*schema.Set).List()
			for i := range keyIdsSet {
				keyIds := keyIdsSet[i].(string)
				loginSettings.KeyIds = append(loginSettings.KeyIds, helper.String(keyIds))
			}
		}

		request.LoginSettings = &loginSettings
	}

	if v, ok := d.GetOk("security_group_ids"); ok {
		securityGroupIdsSet := v.(*schema.Set).List()
		for i := range securityGroupIdsSet {
			securityGroupIds := securityGroupIdsSet[i].(string)
			request.SecurityGroupIds = append(request.SecurityGroupIds, helper.String(securityGroupIds))
		}
	}

	if enhancedServiceMap, ok := helper.InterfacesHeadMap(d, "enhanced_service"); ok {
		enhancedService := thpcv20230321.EnhancedService{}
		if securityServiceMap, ok := helper.ConvertInterfacesHeadToMap(enhancedServiceMap["security_service"]); ok {
			runSecurityServiceEnabled := thpcv20230321.RunSecurityServiceEnabled{}
			if v, ok := securityServiceMap["enabled"]; ok {
				runSecurityServiceEnabled.Enabled = helper.Bool(v.(bool))
			}

			enhancedService.SecurityService = &runSecurityServiceEnabled
		}

		if monitorServiceMap, ok := helper.ConvertInterfacesHeadToMap(enhancedServiceMap["monitor_service"]); ok {
			runMonitorServiceEnabled := thpcv20230321.RunMonitorServiceEnabled{}
			if v, ok := monitorServiceMap["enabled"]; ok {
				runMonitorServiceEnabled.Enabled = helper.Bool(v.(bool))
			}

			enhancedService.MonitorService = &runMonitorServiceEnabled
		}

		if automationServiceMap, ok := helper.ConvertInterfacesHeadToMap(enhancedServiceMap["automation_service"]); ok {
			runAutomationServiceEnabled := thpcv20230321.RunAutomationServiceEnabled{}
			if v, ok := automationServiceMap["enabled"]; ok {
				runAutomationServiceEnabled.Enabled = helper.Bool(v.(bool))
			}

			enhancedService.AutomationService = &runAutomationServiceEnabled
		}

		request.EnhancedService = &enhancedService
	}

	if v, ok := d.GetOk("user_data"); ok {
		request.UserData = helper.String(v.(string))
	}

	if v, ok := d.GetOk("disaster_recover_group_id"); ok {
		request.DisasterRecoverGroupIds = helper.Strings([]string{v.(string)})
	}

	if v, ok := d.GetOk("tag_specification"); ok {
		for _, item := range v.([]interface{}) {
			tagSpecificationMap := item.(map[string]interface{})
			tagSpecification := thpcv20230321.TagSpecification{}
			tagSpecification.ResourceType = helper.String("workspace")

			if v, ok := tagSpecificationMap["tags"]; ok {
				for _, item := range v.([]interface{}) {
					tagsMap := item.(map[string]interface{})
					tag := thpcv20230321.Tag{}
					if v, ok := tagsMap["key"]; ok {
						tag.Key = helper.String(v.(string))
					}

					if v, ok := tagsMap["value"]; ok {
						tag.Value = helper.String(v.(string))
					}

					tagSpecification.Tags = append(tagSpecification.Tags, &tag)
				}
			}

			request.TagSpecification = append(request.TagSpecification, &tagSpecification)
		}
	}

	if v, ok := d.GetOk("hpc_cluster_id"); ok {
		request.HpcClusterId = helper.String(v.(string))
	}

	if v, ok := d.GetOk("cam_role_name"); ok {
		request.CamRoleName = helper.String(v.(string))
	}

	if v, ok := d.GetOk("host_name"); ok {
		request.HostName = helper.String(v.(string))
	}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseThpcV20230321Client().CreateWorkspacesWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}

		response = result
		return nil
	})

	if err != nil {
		log.Printf("[CRITAL]%s create thpc workspaces failed, reason:%+v", logId, err)
		return err
	}

	spaceId := *response.Response.SpaceIdSet[0]

	d.SetId(spaceId)

	// wait status
	waitRequest := thpcv20230321.NewDescribeWorkspacesRequest()
	waitRequest.SpaceIds = helper.Strings([]string{spaceId})
	err = resource.Retry(tccommon.ReadRetryTimeout*10, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseThpcV20230321Client().DescribeWorkspacesWithContext(ctx, waitRequest)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, waitRequest.GetAction(), waitRequest.ToJsonString(), result.ToJsonString())
		}

		if result == nil || result.Response == nil || len(result.Response.SpaceSet) != 1 || result.Response.SpaceSet[0].SpaceState == nil {
			return resource.NonRetryableError(fmt.Errorf("create thpc workspaces failed"))
		}

		if *result.Response.SpaceSet[0].SpaceState != SPACE_STATE_ONLINE {
			return resource.RetryableError(fmt.Errorf("create thpc workspaces status is %d, requestId is %s", *result.Response.SpaceSet[0].SpaceState, *result.Response.RequestId))
		}

		return nil
	})

	if err != nil {
		log.Printf("[CRITAL]%s create thpc workspaces failed, reason:%+v", logId, err)
		return err
	}

	return resourceTencentCloudThpcWorkspacesRead(d, meta)
}

func resourceTencentCloudThpcWorkspacesRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_thpc_workspaces.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	var (
		logId         = tccommon.GetLogId(tccommon.ContextNil)
		ctx           = tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)
		service       = ThpcService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}
		cvmService    = svccvm.NewCvmService(meta.(tccommon.ProviderMeta).GetAPIV3Conn())
		spaceId       = d.Id()
		cvmInstanceId string
	)

	respData, err := service.DescribeThpcWorkspacesById(ctx, spaceId)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `thpc_workspaces` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}

	if respData.ResourceId != nil {
		cvmInstanceId = *respData.ResourceId
	}

	if cvmInstanceId == "" {
		log.Printf("[WARN]%s resource `thpc_workspaces` ResourceID not found, please check if it has been deleted.\n", logId)
		return nil
	}

	cvmInfo, err := cvmService.DescribeInstanceById(ctx, cvmInstanceId)
	if err != nil {
		return err
	}

	if cvmInfo == nil || *cvmInfo.InstanceState == svccvm.CVM_STATUS_LAUNCH_FAILED {
		log.Printf("[CRITAL]instance %s not exist or launch failed", cvmInstanceId)
		return nil
	}

	_ = d.Set("resource_id", cvmInstanceId)

	if respData.SpaceName != nil {
		_ = d.Set("space_name", respData.SpaceName)
	}

	if respData.SpaceType != nil {
		_ = d.Set("space_type", respData.SpaceType)
	}

	if respData.SpaceChargeType != nil {
		_ = d.Set("space_charge_type", respData.SpaceChargeType)
	}

	if respData.Tags != nil {
		tagsList := make([]map[string]interface{}, 0, len(respData.Tags))
		for _, tags := range respData.Tags {
			tagsMap := map[string]interface{}{}
			if tags.Key != nil {
				tagsMap["key"] = tags.Key
			}

			if tags.Value != nil {
				tagsMap["value"] = tags.Value
			}

			tagsList = append(tagsList, tagsMap)
		}

		_ = d.Set("tag_specification", tagsList)
	}

	if cvmInfo.Placement != nil {
		tmpList := make([]interface{}, 0)
		tmpMap := make(map[string]interface{})
		if cvmInfo.Placement.Zone != nil {
			tmpMap["zone"] = cvmInfo.Placement.Zone
		}

		if cvmInfo.Placement.ProjectId != nil {
			tmpMap["project_id"] = cvmInfo.Placement.ProjectId
		}

		tmpList = append(tmpList, tmpMap)

		_ = d.Set("placement", tmpList)
	}

	if cvmInfo.ImageId != nil {
		_ = d.Set("image_id", cvmInfo.ImageId)
	}

	if cvmInfo.SystemDisk != nil {
		tmpList := make([]interface{}, 0)
		tmpMap := make(map[string]interface{})
		if cvmInfo.SystemDisk.DiskId != nil {
			tmpMap["disk_id"] = cvmInfo.SystemDisk.DiskId
		}

		if cvmInfo.SystemDisk.DiskType != nil {
			tmpMap["disk_type"] = cvmInfo.SystemDisk.DiskType
		}

		if cvmInfo.SystemDisk.DiskSize != nil {
			tmpMap["disk_size"] = cvmInfo.SystemDisk.DiskSize
		}

		tmpList = append(tmpList, tmpMap)
		_ = d.Set("system_disk", tmpList)
	}

	tmpDiskList := make([]interface{}, 0)
	if _, ok := d.GetOk("data_disks"); ok {
		// wait dataDisks init
		err = resource.Retry(tccommon.ReadRetryTimeout*5, func() *resource.RetryError {
			tmpCvmInfo, e := cvmService.DescribeInstanceById(ctx, cvmInstanceId)
			if e != nil {
				return tccommon.RetryError(e)
			}

			if tmpCvmInfo.DataDisks != nil && len(tmpCvmInfo.DataDisks) > 0 {
				for _, item := range tmpCvmInfo.DataDisks {
					if *item.DiskType == CVM_DISK_TYPE_LOCAL_NVME {
						continue
					}

					tmpMap := make(map[string]interface{})
					if item.DiskType != nil {
						tmpMap["disk_type"] = item.DiskType
					}

					if item.DiskId != nil {
						tmpMap["disk_id"] = item.DiskId
					}

					if item.DiskSize != nil {
						tmpMap["disk_size"] = item.DiskSize
					}

					if item.DeleteWithInstance != nil {
						tmpMap["delete_with_instance"] = item.DeleteWithInstance
					}

					if item.SnapshotId != nil {
						tmpMap["snapshot_id"] = item.SnapshotId
					}

					if item.Encrypt != nil {
						tmpMap["encrypt"] = item.Encrypt
					}

					if item.KmsKeyId != nil {
						tmpMap["kms_key_id"] = item.KmsKeyId
					}

					if item.ThroughputPerformance != nil {
						tmpMap["throughput_performance"] = item.ThroughputPerformance
					}

					if item.BurstPerformance != nil {
						tmpMap["burst_performance"] = item.BurstPerformance
					}

					tmpDiskList = append(tmpDiskList, tmpMap)
				}

				return nil
			}

			return resource.RetryableError(fmt.Errorf("wait cvm data disks"))
		})

		if err != nil {
			log.Printf("[CRITAL]%s get cvm data disks failed, reason:%+v", logId, err)
			return err
		}
	} else {
		for _, item := range cvmInfo.DataDisks {
			if *item.DiskType == CVM_DISK_TYPE_LOCAL_NVME {
				continue
			}

			tmpMap := make(map[string]interface{})
			if item.DiskType != nil {
				tmpMap["disk_type"] = item.DiskType
			}

			if item.DiskId != nil {
				tmpMap["disk_id"] = item.DiskId
			}

			if item.DiskSize != nil {
				tmpMap["disk_size"] = item.DiskSize
			}

			if item.DeleteWithInstance != nil {
				tmpMap["delete_with_instance"] = item.DeleteWithInstance
			}

			if item.SnapshotId != nil {
				tmpMap["snapshot_id"] = item.SnapshotId
			}

			if item.Encrypt != nil {
				tmpMap["encrypt"] = item.Encrypt
			}

			if item.KmsKeyId != nil {
				tmpMap["kms_key_id"] = item.KmsKeyId
			}

			if item.ThroughputPerformance != nil {
				tmpMap["throughput_performance"] = item.ThroughputPerformance
			}

			if item.BurstPerformance != nil {
				tmpMap["burst_performance"] = item.BurstPerformance
			}

			tmpDiskList = append(tmpDiskList, tmpMap)
		}
	}

	_ = d.Set("data_disks", tmpDiskList)

	if cvmInfo.VirtualPrivateCloud != nil {
		tmpList := make([]interface{}, 0)
		tmpMap := make(map[string]interface{})
		if cvmInfo.VirtualPrivateCloud.VpcId != nil {
			tmpMap["vpc_id"] = cvmInfo.VirtualPrivateCloud.VpcId
		}

		if cvmInfo.VirtualPrivateCloud.SubnetId != nil {
			tmpMap["subnet_id"] = cvmInfo.VirtualPrivateCloud.SubnetId
		}

		if cvmInfo.VirtualPrivateCloud.AsVpcGateway != nil {
			tmpMap["as_vpc_gateway"] = cvmInfo.VirtualPrivateCloud.AsVpcGateway
		}

		if cvmInfo.PrivateIpAddresses != nil {
			privateIpAddresseList := make([]interface{}, 0, len(cvmInfo.PrivateIpAddresses))
			for _, privateIpAddress := range cvmInfo.PrivateIpAddresses {
				privateIpAddresseList = append(privateIpAddresseList, privateIpAddress)
			}

			tmpMap["private_ip_addresses"] = privateIpAddresseList
		}

		if cvmInfo.VirtualPrivateCloud.Ipv6AddressCount != nil {
			tmpMap["ipv6_address_count"] = cvmInfo.VirtualPrivateCloud.Ipv6AddressCount
		}

		tmpList = append(tmpList, tmpMap)
		_ = d.Set("virtual_private_cloud", tmpList)
	}

	if cvmInfo.InternetAccessible != nil {
		tmpList := make([]interface{}, 0)
		tmpMap := make(map[string]interface{})
		if cvmInfo.InternetAccessible.InternetChargeType != nil {
			tmpMap["internet_charge_type"] = cvmInfo.InternetAccessible.InternetChargeType
		}

		if cvmInfo.InternetAccessible.InternetMaxBandwidthOut != nil {
			tmpMap["internet_max_bandwidth_out"] = cvmInfo.InternetAccessible.InternetMaxBandwidthOut
		}

		if len(cvmInfo.PublicIpAddresses) > 0 {
			tmpMap["public_ip_assigned"] = true
		} else {
			tmpMap["public_ip_assigned"] = false
		}

		if cvmInfo.InternetAccessible.BandwidthPackageId != nil {
			tmpMap["bandwidth_package_id"] = cvmInfo.InternetAccessible.BandwidthPackageId
		}

		tmpList = append(tmpList, tmpMap)
		_ = d.Set("internet_accessible", tmpList)
	}

	if cvmInfo.LoginSettings != nil {
		tmpList := make([]interface{}, 0)
		tmpMap := make(map[string]interface{})
		if loginSettingsMap, ok := helper.InterfacesHeadMap(d, "login_settings"); ok {
			if v, ok := loginSettingsMap["password"]; ok && v != "" {
				tmpMap["password"] = v.(string)
			}
		}

		if cvmInfo.LoginSettings.KeyIds != nil {
			keyList := make([]interface{}, 0, len(cvmInfo.LoginSettings.KeyIds))
			for _, item := range cvmInfo.LoginSettings.KeyIds {
				keyList = append(keyList, item)
			}

			tmpMap["key_ids"] = keyList
		}

		tmpList = append(tmpList, tmpMap)
		_ = d.Set("login_settings", tmpList)
	}

	if cvmInfo.SecurityGroupIds != nil {
		tmpList := make([]interface{}, 0)
		for _, item := range cvmInfo.SecurityGroupIds {
			tmpList = append(tmpList, item)
		}

		_ = d.Set("security_group_ids", tmpList)
	}

	if cvmInfo.DisasterRecoverGroupId != nil {
		_ = d.Set("disaster_recover_group_id", cvmInfo.DisasterRecoverGroupId)
	}

	if cvmInfo.HpcClusterId != nil {
		_ = d.Set("hpc_cluster_id", cvmInfo.HpcClusterId)
	}

	if cvmInfo.CamRoleName != nil {
		_ = d.Set("cam_role_name", cvmInfo.CamRoleName)
	}

	return nil
}

func resourceTencentCloudThpcWorkspacesUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_thpc_workspaces.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	var (
		logId   = tccommon.GetLogId(tccommon.ContextNil)
		ctx     = tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)
		spaceId = d.Id()
	)

	immutableArgs := []string{"client_token", "placement", "space_charge_prepaid", "space_charge_type", "space_type", "image_id", "virtual_private_cloud", "internet_accessible", "security_group_ids", "enhanced_service", "user_data", "disaster_recover_group_id", "tag_specification", "hpc_cluster_id", "cam_role_name", "host_name"}
	for _, v := range immutableArgs {
		if d.HasChange(v) {
			return fmt.Errorf("argument `%s` cannot be changed", v)
		}
	}

	if d.HasChange("space_name") {
		request := thpcv20230321.NewModifyWorkspacesAttributeRequest()
		request.SpaceIds = helper.Strings([]string{spaceId})

		if v, ok := d.GetOk("space_name"); ok {
			request.SpaceName = helper.String(v.(string))
		}

		err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseThpcV20230321Client().ModifyWorkspacesAttributeWithContext(ctx, request)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
			}

			return nil
		})

		if err != nil {
			log.Printf("[CRITAL]%s update thpc workspaces space name failed, reason:%+v", logId, err)
			return err
		}
	}

	if d.HasChange("system_disk") {
		sizeKey := fmt.Sprintf("system_disk.0.disk_size")
		typeKey := fmt.Sprintf("system_disk.0.disk_type")
		if d.HasChange(sizeKey) || d.HasChange(typeKey) {
			instanceId := d.Get("resource_id").(string)
			size := d.Get(sizeKey).(int)
			diskType := d.Get(typeKey).(string)
			req := cvm.NewResizeInstanceDisksRequest()
			req.InstanceId = &instanceId
			req.ForceStop = helper.Bool(true)
			req.SystemDisk = &cvm.SystemDisk{
				DiskSize: helper.IntInt64(size),
				DiskType: &diskType,
			}

			// resize
			cvmService := svccvm.NewCvmService(meta.(tccommon.ProviderMeta).GetAPIV3Conn())
			err := cvmService.ResizeInstanceDisks(ctx, req)
			if err != nil {
				return fmt.Errorf("an error occurred when modifying system_disk, reason: %s", err.Error())
			}

			// wait
			err = resource.Retry(tccommon.ReadRetryTimeout*5, func() *resource.RetryError {
				instance, e := cvmService.DescribeInstanceById(ctx, instanceId)
				if e != nil {
					return resource.NonRetryableError(e)
				}

				if instance != nil && instance.LatestOperationState != nil {
					if *instance.InstanceState == CVM_INSTANCE_STATE_FAILED {
						return resource.NonRetryableError(fmt.Errorf("instance operation failed"))
					}

					if *instance.InstanceState == CVM_INSTANCE_STATE_OPERATING {
						return resource.RetryableError(fmt.Errorf("instance operating"))
					}
				}

				if instance != nil && instance.SystemDisk != nil {
					// wait until disk result as expected
					if *instance.SystemDisk.DiskType != diskType || int(*instance.SystemDisk.DiskSize) != size {
						return resource.RetryableError(fmt.Errorf("waiting for expanding success"))
					}
				}

				return nil
			})

			if err != nil {
				return err
			}
		}
	}

	if d.HasChange("data_disks") {
		o, n := d.GetChange("data_disks")
		ov := o.([]interface{})
		nv := n.([]interface{})

		if len(ov) != len(nv) {
			return fmt.Errorf("error: data disk count has changed (%d -> %d) but doesn't support add or remove for now", len(ov), len(nv))
		}

		cbsService := svccbs.NewCbsService(meta.(tccommon.ProviderMeta).GetAPIV3Conn())

		for i := range nv {
			sizeKey := fmt.Sprintf("data_disks.%d.disk_size", i)
			idKey := fmt.Sprintf("data_disks.%d.disk_id", i)
			if !d.HasChange(sizeKey) {
				continue
			}

			size := d.Get(sizeKey).(int)
			diskId := d.Get(idKey).(string)
			err := cbsService.ResizeDisk(ctx, diskId, size)
			if err != nil {
				return fmt.Errorf("an error occurred when modifying %s, reason: %s", sizeKey, err.Error())
			}
		}
	}

	if d.HasChange("login_settings") {
		passwordKey := fmt.Sprintf("login_settings.0.password")
		keyIdsKey := fmt.Sprintf("login_settings.0.key_ids")

		instanceId := d.Get("resource_id").(string)
		cvmService := svccvm.NewCvmService(meta.(tccommon.ProviderMeta).GetAPIV3Conn())
		if d.HasChange(passwordKey) {
			err := cvmService.ModifyPassword(ctx, instanceId, d.Get(passwordKey).(string))
			if err != nil {
				return err
			}

			// wait
			err = resource.Retry(tccommon.ReadRetryTimeout*5, func() *resource.RetryError {
				instance, e := cvmService.DescribeInstanceById(ctx, instanceId)
				if e != nil {
					return resource.NonRetryableError(e)
				}

				if instance.LatestOperationState == nil {
					return resource.RetryableError(fmt.Errorf("wait for operation update"))
				}

				if *instance.LatestOperationState == svccvm.CVM_LATEST_OPERATION_STATE_OPERATING {
					return resource.RetryableError(fmt.Errorf("waiting for instance %s operation", instanceId))
				}

				if *instance.LatestOperationState == svccvm.CVM_LATEST_OPERATION_STATE_FAILED {
					return resource.NonRetryableError(fmt.Errorf("failed operation"))
				}

				return nil
			})

			if err != nil {
				return err
			}
		}

		if d.HasChange(keyIdsKey) {
			o, n := d.GetChange(keyIdsKey)
			ov := o.(*schema.Set)
			nv := n.(*schema.Set)
			adds := nv.Difference(ov)
			removes := ov.Difference(nv)
			adds.Remove("")
			removes.Remove("")

			if removes.Len() > 0 {
				err := cvmService.UnbindKeyPair(ctx, helper.InterfacesStringsPoint(removes.List()), []*string{&instanceId})
				if err != nil {
					return err
				}

				// wait
				err = resource.Retry(tccommon.ReadRetryTimeout*5, func() *resource.RetryError {
					instance, e := cvmService.DescribeInstanceById(ctx, instanceId)
					if e != nil {
						return resource.NonRetryableError(e)
					}

					if instance.LatestOperationState == nil {
						return resource.RetryableError(fmt.Errorf("wait for operation update"))
					}

					if *instance.LatestOperationState == svccvm.CVM_LATEST_OPERATION_STATE_OPERATING {
						return resource.RetryableError(fmt.Errorf("waiting for instance %s operation", instanceId))
					}

					if *instance.LatestOperationState == svccvm.CVM_LATEST_OPERATION_STATE_FAILED {
						return resource.NonRetryableError(fmt.Errorf("failed operation"))
					}

					return nil
				})

				if err != nil {
					return err
				}
			}

			if adds.Len() > 0 {
				err := cvmService.BindKeyPair(ctx, helper.InterfacesStringsPoint(adds.List()), instanceId)
				if err != nil {
					return err
				}

				// wait
				err = resource.Retry(tccommon.ReadRetryTimeout*5, func() *resource.RetryError {
					instance, e := cvmService.DescribeInstanceById(ctx, instanceId)
					if e != nil {
						return resource.NonRetryableError(e)
					}

					if instance.LatestOperationState == nil {
						return resource.RetryableError(fmt.Errorf("wait for operation update"))
					}

					if *instance.LatestOperationState == svccvm.CVM_LATEST_OPERATION_STATE_OPERATING {
						return resource.RetryableError(fmt.Errorf("waiting for instance %s operation", instanceId))
					}

					if *instance.LatestOperationState == svccvm.CVM_LATEST_OPERATION_STATE_FAILED {
						return resource.NonRetryableError(fmt.Errorf("failed operation"))
					}

					return nil
				})

				if err != nil {
					return err
				}
			}
		}
	}

	return resourceTencentCloudThpcWorkspacesRead(d, meta)
}

func resourceTencentCloudThpcWorkspacesDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_thpc_workspaces.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	var (
		logId   = tccommon.GetLogId(tccommon.ContextNil)
		ctx     = tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)
		request = thpcv20230321.NewTerminateWorkspacesRequest()
		spaceId = d.Id()
	)

	request.SpaceIds = helper.Strings([]string{spaceId})
	request.ReleasePrepaidDataDisks = helper.Bool(true)
	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseThpcV20230321Client().TerminateWorkspacesWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}

		return nil
	})

	if err != nil {
		log.Printf("[CRITAL]%s delete thpc workspaces failed, reason:%+v", logId, err)
		return err
	}

	// wait status
	waitRequest := thpcv20230321.NewDescribeWorkspacesRequest()
	waitRequest.SpaceIds = helper.Strings([]string{spaceId})
	err = resource.Retry(tccommon.ReadRetryTimeout*10, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseThpcV20230321Client().DescribeWorkspacesWithContext(ctx, waitRequest)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, waitRequest.GetAction(), waitRequest.ToJsonString(), result.ToJsonString())
		}

		if result == nil || result.Response == nil || len(result.Response.SpaceSet) != 1 || result.Response.SpaceSet[0].SpaceState == nil {
			return resource.NonRetryableError(fmt.Errorf("delete thpc workspaces failed"))
		}

		if *result.Response.SpaceSet[0].SpaceState != SPACE_STATE_ARREARS {
			return resource.RetryableError(fmt.Errorf("delete thpc workspaces status is %d, requestId is %s", *result.Response.SpaceSet[0].SpaceState, *result.Response.RequestId))
		}

		return nil
	})

	if err != nil {
		log.Printf("[CRITAL]%s delete thpc workspaces failed, reason:%+v", logId, err)
		return err
	}

	// delete again
	err = resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseThpcV20230321Client().TerminateWorkspacesWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}

		return nil
	})

	if err != nil {
		log.Printf("[CRITAL]%s delete thpc workspaces failed, reason:%+v", logId, err)
		return err
	}

	// wait status
	err = resource.Retry(tccommon.ReadRetryTimeout*10, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseThpcV20230321Client().DescribeWorkspacesWithContext(ctx, waitRequest)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, waitRequest.GetAction(), waitRequest.ToJsonString(), result.ToJsonString())
		}

		if result == nil || result.Response == nil {
			return resource.NonRetryableError(fmt.Errorf("delete thpc workspaces failed"))
		}

		if len(result.Response.SpaceSet) != 0 {
			return resource.RetryableError(fmt.Errorf("delete thpc workspaces status is %d, requestId is %s", *result.Response.SpaceSet[0].SpaceState, *result.Response.RequestId))
		}

		return nil
	})

	if err != nil {
		log.Printf("[CRITAL]%s delete thpc workspaces failed, reason:%+v", logId, err)
		return err
	}

	return nil
}
