// Code generated by iacg; DO NOT EDIT.
package thpc

import (
	"context"
	"fmt"
	"log"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	thpcv20230321 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/thpc/v20230321"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudThpcWorkspaces() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudThpcWorkspacesCreate,
		Read:   resourceTencentCloudThpcWorkspacesRead,
		Update: resourceTencentCloudThpcWorkspacesUpdate,
		Delete: resourceTencentCloudThpcWorkspacesDelete,
		Schema: map[string]*schema.Schema{
			"client_token": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "用于保证请求幂等性的字符串。该字符串由客户生成，需保证不同请求之间唯一，最大值不超过64个ASCII字符。若不指定该参数，则无法保证请求的幂等性。",
			},
			"placement": {
				Type:        schema.TypeList,
				Optional:    true,
				MaxItems:    1,
				Description: "实例所在的位置。通过该参数可以指定实例所属可用区，所属项目，所属宿主机（在专用宿主机上创建子机时指定）等属性。 <b>注：如果您不指定LaunchTemplate参数，则Placement为必选参数。若同时传递Placement和LaunchTemplate，则默认覆盖LaunchTemplate中对应的Placement的值。</b>",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"zone": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "可用区",
						},
						"project_id": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "项目，默认是0",
						},
					},
				},
			},
			"space_charge_prepaid": {
				Type:        schema.TypeList,
				Optional:    true,
				MaxItems:    1,
				Description: "预付费模式，即包年包月相关参数设置。通过该参数可以指定包年包月实例的购买时长、是否设置自动续费等属性。若指定实例的付费模式为预付费则该参数必传。",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"period": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "购买实例的时长，单位：月。取值范围：1, 2, 3, 12, 24, 36。默认取值为1。",
						},
						"renew_flag": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "自动续费标识。取值范围：\n\nNOTIFY_AND_AUTO_RENEW：通知过期且自动续费\n\nNOTIFY_AND_MANUAL_RENEW：通知过期不自动续费\n\nDISABLE_NOTIFY_AND_MANUAL_RENEW：不通知过期不自动续费\n\n\n默认取值：NOTIFY_AND_MANUAL_RENEW。若该参数指定为NOTIFY_AND_AUTO_RENEW，在账户余额充足的情况下，实例到期后将按月自动续费。",
						},
					},
				},
			},
			"space_charge_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "工作空间计费类型",
			},
			"space_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "工作空间规格",
			},
			"image_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "镜像ID",
			},
			"system_disk": {
				Type:        schema.TypeList,
				Optional:    true,
				MaxItems:    1,
				Description: "工作空间系统盘信息",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"disk_type": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "系统盘类型。系统盘类型限制详见[存储概述](https://cloud.tencent.com/document/product/213/4952)。取值范围：<ul><li>LOCAL_BASIC：本地硬盘</li><li>LOCAL_SSD：本地SSD硬盘</li><li>CLOUD_BASIC：普通云硬盘</li><li>CLOUD_SSD：SSD云硬盘</li><li>CLOUD_PREMIUM：高性能云硬盘</li><li>CLOUD_BSSD：通用性SSD云硬盘</li><li>CLOUD_HSSD：增强型SSD云硬盘</li><li>CLOUD_TSSD：极速型SSD云硬盘</li></ul>默认取值：当前有库存的硬盘类型。",
						},
						"disk_size": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "系统盘大小，单位：GB。默认值为 50",
						},
					},
				},
			},
			"data_disks": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "工作空间数据盘信息",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"disk_type": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "数据盘类型。数据盘类型限制详见[存储概述](https://cloud.tencent.com/document/product/213/4952)。取值范围：<br />\n<li>\n  LOCAL_BASIC：本地硬盘<br />\n  <li>\n    LOCAL_SSD：本地SSD硬盘<br />\n    <li>\n      LOCAL_NVME：本地NVME硬盘，与InstanceType强相关，不支持指定<br />\n      <li>\n        LOCAL_PRO：本地HDD硬盘，与InstanceType强相关，不支持指定<br />\n        <li>\n          CLOUD_BASIC：普通云硬盘<br />\n          <li>\n            CLOUD_PREMIUM：高性能云硬盘<br />\n            <li>\n              CLOUD_SSD：SSD云硬盘<br />\n              <li>\n                CLOUD_HSSD：增强型SSD云硬盘<br />\n                <li>\n                  CLOUD_TSSD：极速型SSD云硬盘<br />\n                  <li>\n                    CLOUD_BSSD：通用型SSD云硬盘<br /><br />默认取值：LOCAL_BASIC。<br /><br />该参数对`ResizeInstanceDisk`接口无效。\n                  </li>\n                </li>\n              </li>\n            </li>\n          </li>\n        </li>\n      </li>\n    </li>\n  </li>\n</li>",
						},
						"disk_id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "数据盘",
						},
						"disk_size": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "数据盘大小，单位：GB。最小调整步长为10G，不同数据盘类型取值范围不同，具体限制详见：[存储概述](https://cloud.tencent.com/document/product/213/4952)。默认值为0，表示不购买数据盘。更多限制详见产品文档。",
						},
						"delete_with_instance": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "数据盘是否随子机销毁。取值范围：\n<li>TRUE：子机销毁时，销毁数据盘，只支持按小时后付费云盘</li>\n<li>\n  FALSE：子机销毁时，保留数据盘<br />\n  默认取值：TRUE<br />\n  该参数目前仅用于 `RunInstances` 接口。\n</li>",
						},
						"snapshot_id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "数据盘快照ID。选择的数据盘快照大小需小于数据盘大小。",
						},
						"encrypt": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "数据盘是加密。取值范围：\n<li>true：加密</li>\n<li>\n  false：不加密<br />\n  默认取值：false<br />\n  该参数目前仅用于 `RunInstances` 接口。\n</li>",
						},
						"kms_key_id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "自定义CMK对应的ID，取值为UUID或者类似kms-abcd1234。用于加密云盘。\n\n该参数目前仅用于 `CreateWorkspaces` 接口。",
						},
						"throughput_performance": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "云硬盘性能，单位：MB/s",
						},
						"burst_performance": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "突发性能\n\n注：内测中。",
						},
					},
				},
			},
			"virtual_private_cloud": {
				Type:        schema.TypeList,
				Optional:    true,
				MaxItems:    1,
				Description: "私有网络相关信息",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"vpc_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "私有网络ID",
						},
						"subnet_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "私有网络子网ID",
						},
						"as_vpc_gateway": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "是否用作公网网关",
						},
						"private_ip_addresses": {
							Type:        schema.TypeSet,
							Optional:    true,
							Description: "私有网络子网 IP 数组",
							Elem:        &schema.Schema{Type: schema.TypeString},
						},
						"ipv6_address_count": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "为弹性网卡指定随机生成",
						},
					},
				},
			},
			"internet_accessible": {
				Type:        schema.TypeList,
				Optional:    true,
				MaxItems:    1,
				Description: "公网带宽相关信息设置",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"internet_charge_type": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "网络计费类型",
						},
						"internet_max_bandwidth_out": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "公网出带宽上限，默认为0",
						},
						"public_ip_assigned": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "是否分配公网IP",
						},
						"bandwidth_package_id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "带宽包ID",
						},
					},
				},
			},
			"space_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "工作空间显示名称",
			},
			"login_settings": {
				Type:        schema.TypeList,
				Optional:    true,
				MaxItems:    1,
				Description: "工作空间登陆设置",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"password": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "实例登录密码。不同操作系统类型密码复杂度限制不一样，具体如下：<br><li>Linux实例密码必须8到30位，至少包括两项[a-z]，[A-Z]、[0-9] 和 [( ) \\` ~ ! @ # $ % ^ & *  - + = | { } [ ] : ; ' , . ? / ]中的特殊符号。</li><br><li>Windows实例密码必须12到30位，至少包括三项[a-z]，[A-Z]，[0-9] 和 [( ) \\` ~ ! @ # $ % ^ & * - + = | { } [ ] : ; ' , . ? /]中的特殊符号。</li><br><br>若不指定该参数，则由系统随机生成密码，并通过站内信方式通知到用户。",
						},
						"key_ids": {
							Type:        schema.TypeSet,
							Optional:    true,
							Description: "实例登录密钥",
							Elem:        &schema.Schema{Type: schema.TypeString},
						},
					},
				},
			},
			"security_group_ids": {
				Type:        schema.TypeSet,
				Optional:    true,
				Description: "工作空间所属安全组",
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"enhanced_service": {
				Type:        schema.TypeList,
				Optional:    true,
				MaxItems:    1,
				Description: "增强服务",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"security_service": {
							Type:        schema.TypeList,
							Optional:    true,
							MaxItems:    1,
							Description: "开启云安全服务。若不指定该参数，则默认开启云安全服务。",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "是否开启[云安全](https://cloud.tencent.com/document/product/296)服务。取值范围：<br><li>TRUE：表示开启云安全服务<br><li>FALSE：表示不开启云安全服务<br><br>默认取值：TRUE。",
									},
								},
							},
						},
						"monitor_service": {
							Type:        schema.TypeList,
							Optional:    true,
							MaxItems:    1,
							Description: "开启腾讯云可观测平台服务。若不指定该参数，则默认开启腾讯云可观测平台服务。",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "是否开启[腾讯云可观测平台](https://cloud.tencent.com/document/product/248)服务。取值范围：<br><li>TRUE：表示开启腾讯云可观测平台服务<br><li>FALSE：表示不开启腾讯云可观测平台服务<br><br>默认取值：TRUE。",
									},
								},
							},
						},
						"automation_service": {
							Type:        schema.TypeList,
							Optional:    true,
							MaxItems:    1,
							Description: "开启云自动化助手服务（TencentCloud Automation Tools，TAT）。若不指定该参数，默认开启云自动化助手服务。",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "是否开启云自动化助手。取值范围：<br><li>TRUE：表示开启云自动化助手服务<br><li>FALSE：表示不开启云自动化助手服务<br><br>默认取值：TRUE。",
									},
								},
							},
						},
					},
				},
			},
			"user_data": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "提供给工作空间使用的用户数据",
			},
			"disaster_recover_group_ids": {
				Type:        schema.TypeSet,
				Optional:    true,
				Description: "置放群组id",
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"tag_specification": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "标签描述列表",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"resource_type": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "标签绑定的资源类型",
						},
						"tags": {
							Type:        schema.TypeList,
							Required:    true,
							Description: "标签对列表",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"key": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "标签键",
									},
									"value": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "标签值",
									},
								},
							},
						},
					},
				},
			},
			"hpc_cluster_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "高性能计算集群ID",
			},
			"cam_role_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "CAM角色名称",
			},
			"host_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "实例主机名。<br><li>点号（.）和短横线（-）不能作为 HostName 的首尾字符，不能连续使用。</li><br><li>Windows 实例：主机名名字符长度为[2, 15]，允许字母（不限制大小写）、数字和短横线（-）组成，不支持点号（.），不能全是数字。</li><br><li>其他类型（Linux 等）实例：主机名字符长度为[2, 60]，允许支持多个点号，点之间为一段，每段允许字母（不限制大小写）、数字和短横线（-）组成。</li><br><li>购买多台实例，如果指定模式串`{R:x}`，表示生成数字`[x, x+n-1]`，其中`n`表示购买实例的数量，例如`server{R:3}`，购买1台时，实例主机名为`server3`；购买2台时，实例主机名分别为`server3`，`server4`。支持指定多个模式串`{R:x}`。</li><br><li>购买多台实例，如果不指定模式串，则在实例主机名添加后缀`1、2...n`，其中`n`表示购买实例的数量，例如`server`，购买2台时，实例主机名分别为`server1`，`server2`。</li>",
			},
		},
	}
}

func resourceTencentCloudThpcWorkspacesCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_thpc_workspaces.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	var (
		logId    = tccommon.GetLogId(tccommon.ContextNil)
		ctx      = tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)
		request  = thpcv20230321.NewCreateWorkspacesRequest()
		response = thpcv20230321.NewCreateWorkspacesResponse()
	)

	if v, ok := d.GetOk("client_token"); ok {
		request.ClientToken = helper.String(v.(string))
	}

	if placementMap, ok := helper.InterfacesHeadMap(d, "placement"); ok {
		spacePlacement := thpcv20230321.SpacePlacement{}
		if v, ok := placementMap["zone"]; ok {
			spacePlacement.Zone = helper.String(v.(string))
		}

		if v, ok := placementMap["project_id"]; ok {
			spacePlacement.ProjectId = helper.IntUint64(v.(int))
		}

		request.Placement = &spacePlacement
	}

	if spaceChargePrepaidMap, ok := helper.InterfacesHeadMap(d, "space_charge_prepaid"); ok {
		spaceChargePrepaid := thpcv20230321.SpaceChargePrepaid{}
		if v, ok := spaceChargePrepaidMap["period"]; ok {
			spaceChargePrepaid.Period = helper.IntInt64(v.(int))
		}

		if v, ok := spaceChargePrepaidMap["renew_flag"]; ok {
			spaceChargePrepaid.RenewFlag = helper.String(v.(string))
		}

		request.SpaceChargePrepaid = &spaceChargePrepaid
	}

	if v, ok := d.GetOk("space_charge_type"); ok {
		request.SpaceChargeType = helper.String(v.(string))
	}

	if v, ok := d.GetOk("space_type"); ok {
		request.SpaceType = helper.String(v.(string))
	}

	if v, ok := d.GetOk("image_id"); ok {
		request.ImageId = helper.String(v.(string))
	}

	if systemDiskMap, ok := helper.InterfacesHeadMap(d, "system_disk"); ok {
		spaceSystemDisk := thpcv20230321.SpaceSystemDisk{}
		if v, ok := systemDiskMap["disk_type"]; ok {
			spaceSystemDisk.DiskType = helper.String(v.(string))
		}

		if v, ok := systemDiskMap["disk_size"]; ok {
			spaceSystemDisk.DiskSize = helper.IntInt64(v.(int))
		}

		request.SystemDisk = &spaceSystemDisk
	}

	if v, ok := d.GetOk("data_disks"); ok {
		for _, item := range v.([]interface{}) {
			dataDisksMap := item.(map[string]interface{})
			spaceDataDisk := thpcv20230321.SpaceDataDisk{}
			if v, ok := dataDisksMap["disk_type"]; ok {
				spaceDataDisk.DiskType = helper.String(v.(string))
			}

			if v, ok := dataDisksMap["disk_id"]; ok {
				spaceDataDisk.DiskId = helper.String(v.(string))
			}

			if v, ok := dataDisksMap["disk_size"]; ok {
				spaceDataDisk.DiskSize = helper.IntInt64(v.(int))
			}

			if v, ok := dataDisksMap["delete_with_instance"]; ok {
				spaceDataDisk.DeleteWithInstance = helper.Bool(v.(bool))
			}

			if v, ok := dataDisksMap["snapshot_id"]; ok {
				spaceDataDisk.SnapshotId = helper.String(v.(string))
			}

			if v, ok := dataDisksMap["encrypt"]; ok {
				spaceDataDisk.Encrypt = helper.Bool(v.(bool))
			}

			if v, ok := dataDisksMap["kms_key_id"]; ok {
				spaceDataDisk.KmsKeyId = helper.String(v.(string))
			}

			if v, ok := dataDisksMap["throughput_performance"]; ok {
				spaceDataDisk.ThroughputPerformance = helper.IntInt64(v.(int))
			}

			if v, ok := dataDisksMap["burst_performance"]; ok {
				spaceDataDisk.BurstPerformance = helper.Bool(v.(bool))
			}

			request.DataDisks = append(request.DataDisks, &spaceDataDisk)
		}
	}

	if virtualPrivateCloudMap, ok := helper.InterfacesHeadMap(d, "virtual_private_cloud"); ok {
		spaceVirtualPrivateCloud := thpcv20230321.SpaceVirtualPrivateCloud{}
		if v, ok := virtualPrivateCloudMap["vpc_id"]; ok {
			spaceVirtualPrivateCloud.VpcId = helper.String(v.(string))
		}

		if v, ok := virtualPrivateCloudMap["subnet_id"]; ok {
			spaceVirtualPrivateCloud.SubnetId = helper.String(v.(string))
		}

		if v, ok := virtualPrivateCloudMap["as_vpc_gateway"]; ok {
			spaceVirtualPrivateCloud.AsVpcGateway = helper.Bool(v.(bool))
		}

		if v, ok := virtualPrivateCloudMap["private_ip_addresses"]; ok {
			privateIpAddressesSet := v.(*schema.Set).List()
			for i := range privateIpAddressesSet {
				privateIpAddresses := privateIpAddressesSet[i].(string)
				spaceVirtualPrivateCloud.PrivateIpAddresses = append(spaceVirtualPrivateCloud.PrivateIpAddresses, helper.String(privateIpAddresses))
			}
		}

		if v, ok := virtualPrivateCloudMap["ipv6_address_count"]; ok {
			spaceVirtualPrivateCloud.Ipv6AddressCount = helper.IntUint64(v.(int))
		}

		request.VirtualPrivateCloud = &spaceVirtualPrivateCloud
	}

	if internetAccessibleMap, ok := helper.InterfacesHeadMap(d, "internet_accessible"); ok {
		spaceInternetAccessible := thpcv20230321.SpaceInternetAccessible{}
		if v, ok := internetAccessibleMap["internet_charge_type"]; ok {
			spaceInternetAccessible.InternetChargeType = helper.String(v.(string))
		}

		if v, ok := internetAccessibleMap["internet_max_bandwidth_out"]; ok {
			spaceInternetAccessible.InternetMaxBandwidthOut = helper.IntInt64(v.(int))
		}

		if v, ok := internetAccessibleMap["public_ip_assigned"]; ok {
			spaceInternetAccessible.PublicIpAssigned = helper.Bool(v.(bool))
		}

		if v, ok := internetAccessibleMap["bandwidth_package_id"]; ok {
			spaceInternetAccessible.BandwidthPackageId = helper.String(v.(string))
		}

		request.InternetAccessible = &spaceInternetAccessible
	}

	if v, ok := d.GetOkExists("space_count"); ok {
		request.SpaceCount = helper.IntInt64(v.(int))
	}

	if v, ok := d.GetOk("space_name"); ok {
		request.SpaceName = helper.String(v.(string))
	}

	if loginSettingsMap, ok := helper.InterfacesHeadMap(d, "login_settings"); ok {
		loginSettings := thpcv20230321.LoginSettings{}
		if v, ok := loginSettingsMap["password"]; ok {
			loginSettings.Password = helper.String(v.(string))
		}

		if v, ok := loginSettingsMap["key_ids"]; ok {
			keyIdsSet := v.(*schema.Set).List()
			for i := range keyIdsSet {
				keyIds := keyIdsSet[i].(string)
				loginSettings.KeyIds = append(loginSettings.KeyIds, helper.String(keyIds))
			}
		}

		request.LoginSettings = &loginSettings
	}

	if v, ok := d.GetOk("security_group_ids"); ok {
		securityGroupIdsSet := v.(*schema.Set).List()
		for i := range securityGroupIdsSet {
			securityGroupIds := securityGroupIdsSet[i].(string)
			request.SecurityGroupIds = append(request.SecurityGroupIds, helper.String(securityGroupIds))
		}
	}

	if enhancedServiceMap, ok := helper.InterfacesHeadMap(d, "enhanced_service"); ok {
		enhancedService := thpcv20230321.EnhancedService{}
		if securityServiceMap, ok := helper.ConvertInterfacesHeadToMap(enhancedServiceMap["security_service"]); ok {
			runSecurityServiceEnabled := thpcv20230321.RunSecurityServiceEnabled{}
			if v, ok := securityServiceMap["enabled"]; ok {
				runSecurityServiceEnabled.Enabled = helper.Bool(v.(bool))
			}

			enhancedService.SecurityService = &runSecurityServiceEnabled
		}

		if monitorServiceMap, ok := helper.ConvertInterfacesHeadToMap(enhancedServiceMap["monitor_service"]); ok {
			runMonitorServiceEnabled := thpcv20230321.RunMonitorServiceEnabled{}
			if v, ok := monitorServiceMap["enabled"]; ok {
				runMonitorServiceEnabled.Enabled = helper.Bool(v.(bool))
			}

			enhancedService.MonitorService = &runMonitorServiceEnabled
		}

		if automationServiceMap, ok := helper.ConvertInterfacesHeadToMap(enhancedServiceMap["automation_service"]); ok {
			runAutomationServiceEnabled := thpcv20230321.RunAutomationServiceEnabled{}
			if v, ok := automationServiceMap["enabled"]; ok {
				runAutomationServiceEnabled.Enabled = helper.Bool(v.(bool))
			}

			enhancedService.AutomationService = &runAutomationServiceEnabled
		}

		request.EnhancedService = &enhancedService
	}

	if v, ok := d.GetOk("user_data"); ok {
		request.UserData = helper.String(v.(string))
	}

	if v, ok := d.GetOk("disaster_recover_group_ids"); ok {
		disasterRecoverGroupIdsSet := v.(*schema.Set).List()
		for i := range disasterRecoverGroupIdsSet {
			disasterRecoverGroupIds := disasterRecoverGroupIdsSet[i].(string)
			request.DisasterRecoverGroupIds = append(request.DisasterRecoverGroupIds, helper.String(disasterRecoverGroupIds))
		}
	}

	if v, ok := d.GetOk("tag_specification"); ok {
		for _, item := range v.([]interface{}) {
			tagSpecificationMap := item.(map[string]interface{})
			tagSpecification := thpcv20230321.TagSpecification{}
			if v, ok := tagSpecificationMap["resource_type"]; ok {
				tagSpecification.ResourceType = helper.String(v.(string))
			}

			if v, ok := tagSpecificationMap["tags"]; ok {
				for _, item := range v.([]interface{}) {
					tagsMap := item.(map[string]interface{})
					tag := thpcv20230321.Tag{}
					if v, ok := tagsMap["key"]; ok {
						tag.Key = helper.String(v.(string))
					}

					if v, ok := tagsMap["value"]; ok {
						tag.Value = helper.String(v.(string))
					}

					tagSpecification.Tags = append(tagSpecification.Tags, &tag)
				}
			}

			request.TagSpecification = append(request.TagSpecification, &tagSpecification)
		}
	}

	if v, ok := d.GetOk("hpc_cluster_id"); ok {
		request.HpcClusterId = helper.String(v.(string))
	}

	if v, ok := d.GetOk("cam_role_name"); ok {
		request.CamRoleName = helper.String(v.(string))
	}

	if v, ok := d.GetOk("host_name"); ok {
		request.HostName = helper.String(v.(string))
	}

	request.DryRun = helper.Bool(false)
	request.SpaceCount = helper.IntInt64(1)
	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseThpcV20230321Client().CreateWorkspacesWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}

		response = result
		return nil
	})

	if err != nil {
		log.Printf("[CRITAL]%s create thpc workspaces failed, reason:%+v", logId, err)
		return err
	}

	spaceId := *response.Response.SpaceIdSet[0]

	d.SetId(spaceId)

	// wait status
	waitRequest := thpcv20230321.NewDescribeWorkspacesRequest()
	waitRequest.SpaceIds = helper.Strings([]string{spaceId})
	err = resource.Retry(tccommon.ReadRetryTimeout*10, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseThpcV20230321Client().DescribeWorkspacesWithContext(ctx, waitRequest)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, waitRequest.GetAction(), waitRequest.ToJsonString(), result.ToJsonString())
		}

		if *result.Response.SpaceSet[0].SpaceState != "ONLINE" {
			return resource.RetryableError(fmt.Errorf("create thpc workspaces status is %d, requestId is %s", *result.Response.SpaceSet[0].SpaceState, *result.Response.RequestId))
		}

		return nil
	})

	if err != nil {
		log.Printf("[CRITAL]%s create thpc workspaces failed, reason:%+v", logId, err)
		return err
	}

	return resourceTencentCloudThpcWorkspacesRead(d, meta)
}

func resourceTencentCloudThpcWorkspacesRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_thpc_workspaces.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	var (
		logId   = tccommon.GetLogId(tccommon.ContextNil)
		ctx     = tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)
		service = ThpcService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}
		spaceId = d.Id()
	)

	respData, err := service.DescribeThpcWorkspacesById(ctx, spaceId)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `thpc_workspaces` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}

	spaceSetList := make([]map[string]interface{}, 0, len(respData.SpaceSet))
	if respData.SpaceSet != nil {
		for _, spaceSet := range respData.SpaceSet {
			spaceSetMap := map[string]interface{}{}

			if spaceSet.SpaceId != nil {
				spaceSetMap["space_id"] = spaceSet.SpaceId
			}

			if spaceSet.SpaceFamily != nil {
				spaceSetMap["space_family"] = spaceSet.SpaceFamily
			}

			if spaceSet.SpaceType != nil {
				spaceSetMap["space_type"] = spaceSet.SpaceType
			}

			if spaceSet.SpaceName != nil {
				spaceSetMap["space_name"] = spaceSet.SpaceName
			}

			if spaceSet.SpaceState != nil {
				spaceSetMap["space_state"] = spaceSet.SpaceState
			}

			if spaceSet.SpaceChargeType != nil {
				spaceSetMap["space_charge_type"] = spaceSet.SpaceChargeType
			}

			if spaceSet.ResourceId != nil {
				spaceSetMap["resource_id"] = spaceSet.ResourceId
			}

			if spaceSet.RenewFlag != nil {
				spaceSetMap["renew_flag"] = spaceSet.RenewFlag
			}

			tagsList := make([]map[string]interface{}, 0, len(spaceSet.Tags))
			if spaceSet.Tags != nil {
				for _, tags := range spaceSet.Tags {
					tagsMap := map[string]interface{}{}

					if tags.Key != nil {
						tagsMap["key"] = tags.Key
					}

					if tags.Value != nil {
						tagsMap["value"] = tags.Value
					}

					tagsList = append(tagsList, tagsMap)
				}

				spaceSetMap["tags"] = tagsList
			}
			if spaceSet.CreatedTime != nil {
				spaceSetMap["created_time"] = spaceSet.CreatedTime
			}

			if spaceSet.ExpiredTime != nil {
				spaceSetMap["expired_time"] = spaceSet.ExpiredTime
			}

			placementMap := map[string]interface{}{}

			if spaceSet.Placement != nil {
				if spaceSet.Placement.Zone != nil {
					placementMap["zone"] = spaceSet.Placement.Zone
				}

				spaceSetMap["placement"] = []interface{}{placementMap}
			}

			if spaceSet.LatestOperation != nil {
				spaceSetMap["latest_operation"] = spaceSet.LatestOperation
			}

			if spaceSet.LatestOperationState != nil {
				spaceSetMap["latest_operation_state"] = spaceSet.LatestOperationState
			}

			spaceSetList = append(spaceSetList, spaceSetMap)
		}

		_ = d.Set("space_set", spaceSetList)
	}

	_ = spaceIdSet
	return nil
}

func resourceTencentCloudThpcWorkspacesUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_thpc_workspaces.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	var (
		logId   = tccommon.GetLogId(tccommon.ContextNil)
		ctx     = tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)
		spaceId = d.Id()
	)

	immutableArgs := []string{"client_token", "placement", "space_charge_prepaid", "space_charge_type", "space_type", "image_id", "system_disk", "data_disks", "virtual_private_cloud", "internet_accessible", "space_count", "login_settings", "security_group_ids", "enhanced_service", "user_data", "disaster_recover_group_ids", "tag_specification", "hpc_cluster_id", "cam_role_name", "host_name"}
	for _, v := range immutableArgs {
		if d.HasChange(v) {
			return fmt.Errorf("argument `%s` cannot be changed", v)
		}
	}

	if d.HasChange("space_name") {
		request := thpcv20230321.NewModifyWorkspacesAttributeRequest()
		request.SpaceIds = helper.Strings([]string{spaceId})

		if v, ok := d.GetOk("space_name"); ok {
			request.SpaceName = helper.String(v.(string))
		}

		err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseThpcV20230321Client().ModifyWorkspacesAttributeWithContext(ctx, request)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
			}

			return nil
		})

		if err != nil {
			log.Printf("[CRITAL]%s update thpc workspaces space name failed, reason:%+v", logId, err)
			return err
		}
	}

	return resourceTencentCloudThpcWorkspacesRead(d, meta)
}

func resourceTencentCloudThpcWorkspacesDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_thpc_workspaces.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	var (
		logId   = tccommon.GetLogId(tccommon.ContextNil)
		ctx     = tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)
		request = thpcv20230321.NewTerminateWorkspacesRequest()
		spaceId = d.Id()
	)

	request.SpaceIds = helper.Strings([]string{spaceId})
	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseThpcV20230321Client().TerminateWorkspacesWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}

		return nil
	})

	if err != nil {
		log.Printf("[CRITAL]%s delete thpc workspaces failed, reason:%+v", logId, err)
		return err
	}

	return nil
}
