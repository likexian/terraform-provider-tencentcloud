package cdb

import (
	"context"
	"fmt"
	"log"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	mysql "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cdb/v20170320"

	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudMysqlInstanceEncryptionOperation() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudMysqlInstanceEncryptionOperationCreate,
		Read:   resourceTencentCloudMysqlInstanceEncryptionOperationRead,
		Delete: resourceTencentCloudMysqlInstanceEncryptionOperationDelete,

		Schema: map[string]*schema.Schema{
			"instance_id": {
				Required:    true,
				ForceNew:    true,
				Type:        schema.TypeString,
				Description: "TencentDB instance ID.",
			},

			"key_id": {
				Optional:    true,
				ForceNew:    true,
				Type:        schema.TypeString,
				Description: "Custom key ID, which is the unique CMK ID. If this value is empty, the key KMS-CDB auto-generated by Tencent Cloud will be used.",
			},

			"key_region": {
				Optional:    true,
				ForceNew:    true,
				Type:        schema.TypeString,
				Description: "Custom storage region, such as ap-guangzhou. When `KeyId` is not empty, this parameter is required.",
			},
		},
	}
}

func resourceTencentCloudMysqlInstanceEncryptionOperationCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_mysql_instance_encryption_operation.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)
	ctx := context.WithValue(context.TODO(), tccommon.LogIdKey, logId)

	var (
		request    = mysql.NewOpenDBInstanceEncryptionRequest()
		instanceId string
	)
	if v, ok := d.GetOk("instance_id"); ok {
		instanceId = v.(string)
		request.InstanceId = helper.String(v.(string))
	}

	if v, ok := d.GetOk("key_id"); ok {
		request.KeyId = helper.String(v.(string))
	}

	if v, ok := d.GetOk("key_region"); ok {
		request.KeyRegion = helper.String(v.(string))
	}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseMysqlClient().OpenDBInstanceEncryption(request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s operate mysql instanceEncryptionOperation failed, reason:%+v", logId, err)
		return err
	}

	d.SetId(instanceId)

	service := MysqlService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}
	err = resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		instanceInfo, err := service.DescribeMysqlInstanceInfoById(ctx, instanceId)
		if err != nil {
			return resource.NonRetryableError(err)
		}
		if *instanceInfo.Encryption == "YES" {
			return nil
		}
		if *instanceInfo.Encryption == "NO" {
			return resource.RetryableError(fmt.Errorf("%s instanceEncryption status is %s", instanceId, *instanceInfo.Encryption))
		}
		err = fmt.Errorf("%s operate mysql instanceEncryption status is %s,we won't wait for it finish", instanceId, *instanceInfo.Encryption)
		return resource.NonRetryableError(err)
	})

	if err != nil {
		log.Printf("[CRITAL]%s instanceEncryption fail, reason:%s\n ", logId, err.Error())
		return err
	}

	return resourceTencentCloudMysqlInstanceEncryptionOperationRead(d, meta)
}

func resourceTencentCloudMysqlInstanceEncryptionOperationRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_mysql_instance_encryption_operation.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := context.WithValue(context.TODO(), tccommon.LogIdKey, logId)

	service := MysqlService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	instanceId := d.Id()

	result, err := service.DescribeMysqlInstanceInfoById(ctx, instanceId)
	if err != nil {
		return err
	}

	if result == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `MysqlInstanceInfo` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}

	_ = d.Set("instance_id", instanceId)

	if result.KeyId != nil {
		_ = d.Set("key_id", result.KeyId)
	}

	if result.KeyRegion != nil {
		_ = d.Set("key_region", result.KeyRegion)
	}

	return nil
}

func resourceTencentCloudMysqlInstanceEncryptionOperationDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_mysql_instance_encryption_operation.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	return nil
}
