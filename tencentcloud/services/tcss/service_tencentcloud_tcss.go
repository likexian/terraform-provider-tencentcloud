// Code generated by iacg; DO NOT EDIT.
package tcss

import (
	"context"
	"log"
	"strconv"

	tcssv20201101 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/tcss/v20201101"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/connectivity"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/ratelimit"
)

func NewTcssService(client *connectivity.TencentCloudClient) TcssService {
	return TcssService{client: client}
}

type TcssService struct {
	client *connectivity.TencentCloudClient
}

func (me *TcssService) DescribeTcssImageRegistryById(ctx context.Context, registryId string) (ret *tcssv20201101.ImageRepoRegistryInfo, errRet error) {
	logId := tccommon.GetLogId(ctx)

	request := tcssv20201101.NewDescribeAssetImageRegistryRegistryListRequest()

	defer func() {
		if errRet != nil {
			log.Printf("[CRITAL]%s api[%s] fail, request body [%s], reason[%s]\n", logId, request.GetAction(), request.ToJsonString(), errRet.Error())
		}
	}()

	ratelimit.Check(request.GetAction())

	var (
		instances []*tcssv20201101.ImageRepoRegistryInfo
		offset    uint64 = 0
		limit     uint64 = 20
	)

	for {
		request.Offset = &offset
		request.Limit = &limit
		response, err := me.client.UseTcssV20201101Client().DescribeAssetImageRegistryRegistryList(request)
		if err != nil {
			errRet = err
			return
		}
		log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), response.ToJsonString())

		if response == nil || len(response.Response.List) < 1 {
			break
		}
		instances = append(instances, response.Response.List...)
		if len(response.Response.List) < int(limit) {
			break
		}

		offset += limit
	}

	if len(instances) == 0 {
		return
	}

	registryIdUint, _ := strconv.ParseUint(registryId, 10, 64)
	for _, item := range instances {
		if *item.RegistryId == registryIdUint {
			ret = item
			return
		}
	}

	return
}
