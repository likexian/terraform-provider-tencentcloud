// Code generated by iacg; DO NOT EDIT.
package cfw

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"log"
	"text/template"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	cfwv20190904 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cfw/v20190904"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudSgRule() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudSgRuleCreate,
		Read:   resourceTencentCloudSgRuleRead,
		Update: resourceTencentCloudSgRuleUpdate,
		Delete: resourceTencentCloudSgRuleDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"data": {
				Type:        schema.TypeList,
				Required:    true,
				Description: "Creates rule data.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"source_content": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Source example: `net`: IP/CIDR (192.168.0.2); `template`: parameter template (ipm-dyodhpby); `instance`: asset instance (ins-123456); `resourcegroup`: asset group (/all groups/group 1/subgroup 1); `tag`: resource tag ({\"Key\":\"tag key\",\"Value\":\"tag value\"}); `region`: region (ap-gaungzhou).",
						},
						"source_type": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Access source type. Valid values: net|template|instance|resourcegroup|tag|region.",
						},
						"dest_content": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Destination example: `net`: IP/CIDR (192.168.0.2); `template`: parameter template (ipm-dyodhpby); `instance`: asset instance (ins-123456); `resourcegroup`: asset group (/all groups/group 1/subgroup 1); `tag`: resource tag ({\"Key\":\"tag key\",\"Value\":\"tag value\"}); `region`: region (ap-gaungzhou).",
						},
						"dest_type": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Access destination type. Valid values: net|template|instance|resourcegroup|tag|region.",
						},
						"protocol": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Protocol. TCP/UDP/ICMP/ANY.",
						},
						"port": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "The port to apply access control rules. Valid values: `-1/-1`: all ports, `80`: port 80.",
						},
						"service_template_id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Parameter template ID of port and protocol type; mutually exclusive with Protocol and Port.",
						},
						"rule_action": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "The action that Cloud Firewall performs on the traffic. Valid values: `accept`: allow, `drop`: deny.",
						},
						"description": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Description.",
						},
						"order_index": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Rule priority. -1: lowest; 1: highest.",
						},
						"id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "The unique ID of the rule.",
						},
						"enable": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Rule status. true: enabled; false: disabled.",
						},
					},
				},
			},

			"type": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: "Adding type. 0: add to the end; 1: add to the front; 2: insert. Default: 0.",
			},

			"client_token": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "An identifier to ensure the idempotency of the request. The value of the ClientToken parameter is a unique string that is generated by your client and can contain up to 64 ASCII characters in length.",
			},

			"is_delay": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: "Indicates whether to delay publishing. 1: delay; other values: do not delay.",
			},
		},
	}
}

func resourceTencentCloudSgRuleCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_sg_rule.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		ruleUuid int64
	)
	var (
		request  = cfwv20190904.NewAddEnterpriseSecurityGroupRulesRequest()
		response = cfwv20190904.NewAddEnterpriseSecurityGroupRulesResponse()
	)

	if v, ok := d.GetOk("data"); ok {
		for _, item := range v.([]interface{}) {
			dataMap := item.(map[string]interface{})
			securityGroupRule := cfwv20190904.SecurityGroupRule{}
			if v, ok := dataMap["source_content"]; ok {
				securityGroupRule.SourceContent = helper.String(v.(string))
			}
			if v, ok := dataMap["source_type"]; ok {
				securityGroupRule.SourceType = helper.String(v.(string))
			}
			if v, ok := dataMap["dest_content"]; ok {
				securityGroupRule.DestContent = helper.String(v.(string))
			}
			if v, ok := dataMap["dest_type"]; ok {
				securityGroupRule.DestType = helper.String(v.(string))
			}
			if v, ok := dataMap["protocol"]; ok {
				securityGroupRule.Protocol = helper.String(v.(string))
			}
			if v, ok := dataMap["port"]; ok {
				securityGroupRule.Port = helper.String(v.(string))
			}
			if v, ok := dataMap["service_template_id"]; ok {
				securityGroupRule.ServiceTemplateId = helper.String(v.(string))
			}
			if v, ok := dataMap["rule_action"]; ok {
				securityGroupRule.RuleAction = helper.String(v.(string))
			}
			if v, ok := dataMap["description"]; ok {
				securityGroupRule.Description = helper.String(v.(string))
			}
			if v, ok := dataMap["order_index"]; ok {
				securityGroupRule.OrderIndex = helper.String(v.(string))
			}
			if v, ok := dataMap["id"]; ok {
				securityGroupRule.Id = helper.String(v.(string))
			}
			if v, ok := dataMap["enable"]; ok {
				securityGroupRule.Enable = helper.String(v.(string))
			}
			request.Data = append(request.Data, &securityGroupRule)
		}
	}

	if v, ok := d.GetOkExists("type"); ok {
		request.Type = helper.IntUint64(v.(int))
	}

	if v, ok := d.GetOk("client_token"); ok {
		request.ClientToken = helper.String(v.(string))
	}

	if v, ok := d.GetOkExists("is_delay"); ok {
		request.IsDelay = helper.IntUint64(v.(int))
	}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCfwV20190904Client().AddEnterpriseSecurityGroupRulesWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create sg rule failed, reason:%+v", logId, err)
		return err
	}

	if len(response.Response.Rules) < 1 {
		return fmt.Errorf("resource `tencentcloud_sg_rule` create failed.")
	}

	ruleUuid = *response.Response.Rules[0].RuleUuid

	if _, err := (&resource.StateChangeConf{
		Delay:      10 * time.Second,
		MinTimeout: 3 * time.Second,
		Pending:    []string{"false"},
		Refresh:    resourceSgRuleCreateStateRefreshFunc_0_0(ctx, ruleUuid),
		Target:     []string{"true"},
		Timeout:    180 * time.Second,
	}).WaitForStateContext(ctx); err != nil {
		return err
	}
	d.SetId(helper.Int64ToStr(ruleUuid))

	return resourceTencentCloudSgRuleRead(d, meta)
}

func resourceTencentCloudSgRuleRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_sg_rule.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := CfwService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	ruleUuid := d.Id()

	respData, err := service.DescribeSgRuleById(ctx, ruleUuid)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `sg_rule` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}
	if respData.Total != nil {
		_ = d.Set("total", respData.Total)
	}

	if respData.AllTotal != nil {
		_ = d.Set("all_total", respData.AllTotal)
	}

	dataList := make([]map[string]interface{}, 0, len(respData.Data))
	if respData.Data != nil {
		for _, data := range respData.Data {
			dataMap := map[string]interface{}{}

			if data.OrderIndex != nil {
				dataMap["order_index"] = data.OrderIndex
			}

			if data.Uuid != nil {
				dataMap["uuid"] = data.Uuid
			}

			if data.SourceId != nil {
				dataMap["source_id"] = data.SourceId
			}

			if data.SourceType != nil {
				dataMap["source_type"] = data.SourceType
			}

			if data.TargetId != nil {
				dataMap["target_id"] = data.TargetId
			}

			if data.TargetType != nil {
				dataMap["target_type"] = data.TargetType
			}

			if data.Protocol != nil {
				dataMap["protocol"] = data.Protocol
			}

			if data.Port != nil {
				dataMap["port"] = data.Port
			}

			if data.Strategy != nil {
				dataMap["strategy"] = data.Strategy
			}

			if data.Status != nil {
				dataMap["status"] = data.Status
			}

			if data.Detail != nil {
				dataMap["detail"] = data.Detail
			}

			if data.AclTags != nil {
				dataMap["acl_tags"] = data.AclTags
			}

			if data.IsNew != nil {
				dataMap["is_new"] = data.IsNew
			}

			if data.Region != nil {
				dataMap["region"] = data.Region
			}

			if data.IsDelay != nil {
				dataMap["is_delay"] = data.IsDelay
			}

			if data.ServiceTemplateId != nil {
				dataMap["service_template_id"] = data.ServiceTemplateId
			}

			if data.SouInstanceName != nil {
				dataMap["sou_instance_name"] = data.SouInstanceName
			}

			if data.SouPublicIp != nil {
				dataMap["sou_public_ip"] = data.SouPublicIp
			}

			if data.SouPrivateIp != nil {
				dataMap["sou_private_ip"] = data.SouPrivateIp
			}

			if data.SouCidr != nil {
				dataMap["sou_cidr"] = data.SouCidr
			}

			if data.SouParameterName != nil {
				dataMap["sou_parameter_name"] = data.SouParameterName
			}

			if data.InstanceName != nil {
				dataMap["instance_name"] = data.InstanceName
			}

			if data.PublicIp != nil {
				dataMap["public_ip"] = data.PublicIp
			}

			if data.PrivateIp != nil {
				dataMap["private_ip"] = data.PrivateIp
			}

			if data.Cidr != nil {
				dataMap["cidr"] = data.Cidr
			}

			if data.ParameterName != nil {
				dataMap["parameter_name"] = data.ParameterName
			}

			if data.ProtocolPortName != nil {
				dataMap["protocol_port_name"] = data.ProtocolPortName
			}

			betaListList := make([]map[string]interface{}, 0, len(data.BetaList))
			if data.BetaList != nil {
				for _, betaList := range data.BetaList {
					betaListMap := map[string]interface{}{}

					if betaList.TaskId != nil {
						betaListMap["task_id"] = betaList.TaskId
					}

					if betaList.TaskName != nil {
						betaListMap["task_name"] = betaList.TaskName
					}

					if betaList.LastTime != nil {
						betaListMap["last_time"] = betaList.LastTime
					}

					betaListList = append(betaListList, betaListMap)
				}

				dataMap["beta_list"] = betaListList
			}
			if data.Id != nil {
				dataMap["id"] = data.Id
			}

			dataList = append(dataList, dataMap)
		}

		_ = d.Set("data", dataList)
	}

	if respData.Enable != nil {
		_ = d.Set("enable", respData.Enable)
	}

	return nil
}

func resourceTencentCloudSgRuleUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_sg_rule.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	immutableArgs := []string{"type", "client_token", "is_delay"}
	for _, v := range immutableArgs {
		if d.HasChange(v) {
			return fmt.Errorf("argument `%s` cannot be changed", v)
		}
	}
	ruleUuid := d.Id()

	needChange := false
	mutableArgs := []string{"data", "modify_type", "enable"}
	for _, v := range mutableArgs {
		if d.HasChange(v) {
			needChange = true
			break
		}
	}

	if needChange {
		request := cfwv20190904.NewModifyEnterpriseSecurityGroupRuleRequest()

		request.RuleUuid = helper.StrToUint64Point(ruleUuid)

		if dataMap, ok := helper.InterfacesHeadMap(d, "data"); ok {
			securityGroupRule := cfwv20190904.SecurityGroupRule{}
			if v, ok := dataMap["source_content"]; ok {
				securityGroupRule.SourceContent = helper.String(v.(string))
			}
			if v, ok := dataMap["source_type"]; ok {
				securityGroupRule.SourceType = helper.String(v.(string))
			}
			if v, ok := dataMap["dest_content"]; ok {
				securityGroupRule.DestContent = helper.String(v.(string))
			}
			if v, ok := dataMap["dest_type"]; ok {
				securityGroupRule.DestType = helper.String(v.(string))
			}
			if v, ok := dataMap["protocol"]; ok {
				securityGroupRule.Protocol = helper.String(v.(string))
			}
			if v, ok := dataMap["port"]; ok {
				securityGroupRule.Port = helper.String(v.(string))
			}
			if v, ok := dataMap["service_template_id"]; ok {
				securityGroupRule.ServiceTemplateId = helper.String(v.(string))
			}
			if v, ok := dataMap["rule_action"]; ok {
				securityGroupRule.RuleAction = helper.String(v.(string))
			}
			if v, ok := dataMap["description"]; ok {
				securityGroupRule.Description = helper.String(v.(string))
			}
			if v, ok := dataMap["order_index"]; ok {
				securityGroupRule.OrderIndex = helper.String(v.(string))
			}
			if v, ok := dataMap["id"]; ok {
				securityGroupRule.Id = helper.String(v.(string))
			}
			if v, ok := dataMap["enable"]; ok {
				securityGroupRule.Enable = helper.String(v.(string))
			}
			request.Data = &securityGroupRule
		}

		if v, ok := d.GetOkExists("modify_type"); ok {
			request.ModifyType = helper.IntUint64(v.(int))
		}

		if v, ok := d.GetOkExists("enable"); ok {
			request.Enable = helper.IntUint64(v.(int))
		}

		err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCfwV20190904Client().ModifyEnterpriseSecurityGroupRuleWithContext(ctx, request)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
			}
			return nil
		})
		if err != nil {
			log.Printf("[CRITAL]%s update sg rule failed, reason:%+v", logId, err)
			return err
		}
		if _, err := (&resource.StateChangeConf{
			Delay:      10 * time.Second,
			MinTimeout: 3 * time.Second,
			Pending:    []string{"false"},
			Refresh:    resourceSgRuleUpdateStateRefreshFunc_0_0(ctx, ruleUuid),
			Target:     []string{"true"},
			Timeout:    180 * time.Second,
		}).WaitForStateContext(ctx); err != nil {
			return err
		}
	}

	return resourceTencentCloudSgRuleRead(d, meta)
}

func resourceTencentCloudSgRuleDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_sg_rule.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	ruleUuid := d.Id()

	var (
		request  = cfwv20190904.NewRemoveEnterpriseSecurityGroupRuleRequest()
		response = cfwv20190904.NewRemoveEnterpriseSecurityGroupRuleResponse()
	)

	request.RuleUuid = helper.StrToInt64Point(ruleUuid)

	if v, ok := d.GetOkExists("remove_type"); ok {
		request.RemoveType = helper.IntInt64(v.(int))
	}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCfwV20190904Client().RemoveEnterpriseSecurityGroupRuleWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s delete sg rule failed, reason:%+v", logId, err)
		return err
	}

	_ = response
	if _, err := (&resource.StateChangeConf{
		Delay:      10 * time.Second,
		MinTimeout: 3 * time.Second,
		Pending:    []string{"false"},
		Refresh:    resourceSgRuleDeleteStateRefreshFunc_0_0(ctx, ruleUuid),
		Target:     []string{"true"},
		Timeout:    180 * time.Second,
	}).WaitForStateContext(ctx); err != nil {
		return err
	}
	return nil
}

func resourceSgRuleCreateStateRefreshFunc_0_0(ctx context.Context, ruleUuid int64) resource.StateRefreshFunc {
	var req *cfwv20190904.DescribeEnterpriseSGRuleProgressRequest
	t := template.New("gotpl")
	var tplObj *template.Template
	return func() (interface{}, string, error) {
		meta := tccommon.ProviderMetaFromContext(ctx)
		if meta == nil {
			return nil, "", fmt.Errorf("resource data can not be nil")
		}
		if req == nil {
			d := tccommon.ResourceDataFromContext(ctx)
			if d == nil {
				return nil, "", fmt.Errorf("resource data can not be nil")
			}
			_ = d
			req = cfwv20190904.NewDescribeEnterpriseSGRuleProgressRequest()
		}
		resp, err := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCfwV20190904Client().DescribeEnterpriseSGRuleProgressWithContext(ctx, req)
		if err != nil {
			return nil, "", err
		}
		if resp == nil || resp.Response == nil {
			return nil, "", nil
		}
		if tplObj == nil {
			tplObj, err = t.Parse("{{ if .Progress == 100 }}{{ true }}{{ else }}{{ false }}{{ end }}")
			if err != nil {
				return resp.Response, "", fmt.Errorf("parse state go-template error: %w", err)
			}
		}
		stream := new(bytes.Buffer)
		if err := tplObj.Execute(stream, resp.Response); err != nil {
			return resp.Response, "", err
		}
		stateBytes, err := io.ReadAll(stream)
		if err != nil {
			return resp.Response, "", err
		}
		state := string(stateBytes)
		return resp.Response, state, nil
	}
}

func resourceSgRuleUpdateStateRefreshFunc_0_0(ctx context.Context, ruleUuid string) resource.StateRefreshFunc {
	var req *cfwv20190904.DescribeEnterpriseSGRuleProgressRequest
	t := template.New("gotpl")
	var tplObj *template.Template
	return func() (interface{}, string, error) {
		meta := tccommon.ProviderMetaFromContext(ctx)
		if meta == nil {
			return nil, "", fmt.Errorf("resource data can not be nil")
		}
		if req == nil {
			d := tccommon.ResourceDataFromContext(ctx)
			if d == nil {
				return nil, "", fmt.Errorf("resource data can not be nil")
			}
			_ = d
			req = cfwv20190904.NewDescribeEnterpriseSGRuleProgressRequest()
		}
		resp, err := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCfwV20190904Client().DescribeEnterpriseSGRuleProgressWithContext(ctx, req)
		if err != nil {
			return nil, "", err
		}
		if resp == nil || resp.Response == nil {
			return nil, "", nil
		}
		if tplObj == nil {
			tplObj, err = t.Parse("{{ if .Progress == 100 }}{{ true }}{{ else }}{{ false }}{{ end }}")
			if err != nil {
				return resp.Response, "", fmt.Errorf("parse state go-template error: %w", err)
			}
		}
		stream := new(bytes.Buffer)
		if err := tplObj.Execute(stream, resp.Response); err != nil {
			return resp.Response, "", err
		}
		stateBytes, err := io.ReadAll(stream)
		if err != nil {
			return resp.Response, "", err
		}
		state := string(stateBytes)
		return resp.Response, state, nil
	}
}

func resourceSgRuleDeleteStateRefreshFunc_0_0(ctx context.Context, ruleUuid string) resource.StateRefreshFunc {
	var req *cfwv20190904.DescribeEnterpriseSGRuleProgressRequest
	t := template.New("gotpl")
	var tplObj *template.Template
	return func() (interface{}, string, error) {
		meta := tccommon.ProviderMetaFromContext(ctx)
		if meta == nil {
			return nil, "", fmt.Errorf("resource data can not be nil")
		}
		if req == nil {
			d := tccommon.ResourceDataFromContext(ctx)
			if d == nil {
				return nil, "", fmt.Errorf("resource data can not be nil")
			}
			_ = d
			req = cfwv20190904.NewDescribeEnterpriseSGRuleProgressRequest()
		}
		resp, err := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCfwV20190904Client().DescribeEnterpriseSGRuleProgressWithContext(ctx, req)
		if err != nil {
			return nil, "", err
		}
		if resp == nil || resp.Response == nil {
			return nil, "", nil
		}
		if tplObj == nil {
			tplObj, err = t.Parse("{{ if .Progress == 100 }}{{ true }}{{ else }}{{ false }}{{ end }}")
			if err != nil {
				return resp.Response, "", fmt.Errorf("parse state go-template error: %w", err)
			}
		}
		stream := new(bytes.Buffer)
		if err := tplObj.Execute(stream, resp.Response); err != nil {
			return resp.Response, "", err
		}
		stateBytes, err := io.ReadAll(stream)
		if err != nil {
			return resp.Response, "", err
		}
		state := string(stateBytes)
		return resp.Response, state, nil
	}
}
