// Code generated by iacg; DO NOT EDIT.
package tke

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	tkev20220501 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/tke/v20220501"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func DataSourceTencentCloudKubernetesHealthCheckTemplate() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudKubernetesHealthCheckTemplateRead,
		Schema: map[string]*schema.Schema{
			"health_check_template": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "health check template",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"rules": {
							Type:        schema.TypeList,
							Required:    true,
							Description: "health check template rule",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "health check template rule name",
									},
									"description": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "health check template rule description",
									},
									"repair_action": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "health check template rule repair action",
									},
									"repair_effect": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "health check template rule repair effect",
									},
									"should_enable": {
										Type:        schema.TypeBool,
										Required:    true,
										Description: "health check template rule should enable",
									},
									"should_repair": {
										Type:        schema.TypeBool,
										Required:    true,
										Description: "health check template rule should repair",
									},
									"severity": {
										Type:        schema.TypeString,
										Required:    true,
										Description: "health check template rule severity",
									},
								},
							},
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudKubernetesHealthCheckTemplateRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_kubernetes_health_check_template.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := TkeService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	var respData *tkev20220501.DescribeHealthCheckTemplateResponseParams
	err := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeKubernetesHealthCheckTemplateByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if err != nil {
		return err
	}

	var ids []string
	healthCheckTemplateMap := map[string]interface{}{}

	if respData.HealthCheckTemplate != nil {
		rulesList := make([]map[string]interface{}, 0, len(respData.HealthCheckTemplate.Rules))
		if respData.HealthCheckTemplate.Rules != nil {
			for _, rules := range respData.HealthCheckTemplate.Rules {
				rulesMap := map[string]interface{}{}

				var name string
				if rules.Name != nil {
					rulesMap["name"] = rules.Name
					name = *rules.Name
				}

				if rules.Description != nil {
					rulesMap["description"] = rules.Description
				}

				if rules.RepairAction != nil {
					rulesMap["repair_action"] = rules.RepairAction
				}

				if rules.RepairEffect != nil {
					rulesMap["repair_effect"] = rules.RepairEffect
				}

				if rules.ShouldEnable != nil {
					rulesMap["should_enable"] = rules.ShouldEnable
				}

				if rules.ShouldRepair != nil {
					rulesMap["should_repair"] = rules.ShouldRepair
				}

				if rules.Severity != nil {
					rulesMap["severity"] = rules.Severity
				}

				ids = append(ids, name)
				rulesList = append(rulesList, rulesMap)
			}

			healthCheckTemplateMap["rules"] = rulesList
		}
		_ = d.Set("health_check_template", []interface{}{healthCheckTemplateMap})
	}

	d.SetId(helper.DataResourceIdsHash(ids))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), healthCheckTemplateMap); e != nil {
			return e
		}
	}

	return nil
}
