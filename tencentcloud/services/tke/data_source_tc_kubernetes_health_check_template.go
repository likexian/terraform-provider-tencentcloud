// Code generated by iacg; DO NOT EDIT.
package tke

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	tkev20220501 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/tke/v20220501"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
)

func DataSourceTencentCloudKubernetesHealthCheckTemplate() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudKubernetesHealthCheckTemplateRead,
		Schema: map[string]*schema.Schema{
			"rules": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Health Check Template Rules.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Health Check Template Rule Name.",
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Health Check Template Rule Description.",
						},
						"repair_action": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Health Check Template Rule Repair Action.",
						},
						"repair_effect": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Health Check Template Rule Repair Effect.",
						},
						"should_enable": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Health Check Template Rule Should Enable.",
						},
						"should_repair": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Health Check Template Rule Should Repair.",
						},
						"severity": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Health Check Template Rule Severity.",
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudKubernetesHealthCheckTemplateRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_kubernetes_health_check_template.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := TkeService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	var respData *tkev20220501.DescribeHealthCheckTemplateResponseParams
	err := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeKubernetesHealthCheckTemplateByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if err != nil {
		return err
	}

	if respData.HealthCheckTemplate != nil {
		if respData.HealthCheckTemplate.Rules != nil {
			_ = d.Set("rules", respData.HealthCheckTemplate.Rules)
		}

	}

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), respData.HealthCheckTemplate.Rules); e != nil {
			return e
		}
	}

	return nil
}
