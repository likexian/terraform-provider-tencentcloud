// Code generated by iacg; DO NOT EDIT.
package cvm

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	cvm "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cvm/v20170312"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
)

func DataSourceTencentCloudCvmImportImageOs() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudCvmImportImageOsRead,
		Schema: map[string]*schema.Schema{
			"import_image_os_list_supported": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Supported operating system types of imported images.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"windows": {
							Type:        schema.TypeSet,
							Computed:    true,
							Description: "Supported Windows OS Note: This field may return null, indicating that no valid values can be obtained.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"linux": {
							Type:        schema.TypeSet,
							Computed:    true,
							Description: "Supported Linux OS Note: This field may return null, indicating that no valid values can be obtained.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"import_image_os_version_set": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Supported operating system versions of imported images.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"os_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Operating system type.",
						},
						"os_versions": {
							Type:        schema.TypeSet,
							Computed:    true,
							Description: "Supported operating system versions.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"architecture": {
							Type:        schema.TypeSet,
							Computed:    true,
							Description: "Supported operating system architecture.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudCvmImportImageOsRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_cvm_import_image_os.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := CvmService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	var respData *cvm.DescribeImportImageOsResponseParams
	err := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeCvmImportImageOsByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if err != nil {
		return err
	}

	importImageOsListSupportedMap := map[string]interface{}{}

	if respData.ImportImageOsListSupported != nil {
		if respData.ImportImageOsListSupported.Windows != nil {
			importImageOsListSupportedMap["windows"] = respData.ImportImageOsListSupported.Windows
		}

		if respData.ImportImageOsListSupported.Linux != nil {
			importImageOsListSupportedMap["linux"] = respData.ImportImageOsListSupported.Linux
		}

		_ = d.Set("import_image_os_list_supported", []interface{}{importImageOsListSupportedMap})
	}

	importImageOsVersionSetList := make([]map[string]interface{}, 0, len(respData.ImportImageOsVersionSet))
	if respData.ImportImageOsVersionSet != nil {
		for _, importImageOsVersionSet := range respData.ImportImageOsVersionSet {
			importImageOsVersionSetMap := map[string]interface{}{}

			if importImageOsVersionSet.OsName != nil {
				importImageOsVersionSetMap["os_name"] = importImageOsVersionSet.OsName
			}

			if importImageOsVersionSet.OsVersions != nil {
				importImageOsVersionSetMap["os_versions"] = importImageOsVersionSet.OsVersions
			}

			if importImageOsVersionSet.Architecture != nil {
				importImageOsVersionSetMap["architecture"] = importImageOsVersionSet.Architecture
			}

			importImageOsVersionSetList = append(importImageOsVersionSetList, importImageOsVersionSetMap)
		}

		_ = d.Set("import_image_os_version_set", importImageOsVersionSetList)
	}

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), dataSourceTencentCloudCvmImportImageOsReadOutputContent(ctx)); e != nil {
			return e
		}
	}

	return nil
}
