// Code generated by iacg; DO NOT EDIT.
package cvm

import (
	"context"
	"log"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	cvm "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cvm/v20170312"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudCvmExportImages() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudCvmExportImagesCreate,
		Read:   resourceTencentCloudCvmExportImagesRead,
		Delete: resourceTencentCloudCvmExportImagesDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"bucket_name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "COS bucket name.",
			},

			"image_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "Image ID.",
			},

			"file_name_prefix": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "Prefix of exported file.",
			},

			"export_format": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: "Format of the exported image file. Valid values: RAW, QCOW2, VHD and VMDK. Default value: RAW.",
			},

			"only_export_root_disk": {
				Type:        schema.TypeBool,
				Optional:    true,
				ForceNew:    true,
				Description: "Whether to export only the system disk.",
			},

			"dry_run": {
				Type:        schema.TypeBool,
				Optional:    true,
				ForceNew:    true,
				Description: "Check whether the image can be exported.",
			},

			"role_name": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: "Role name (Default: CVM_QcsRole). Before exporting the images, make sure the role exists, and it has write permission to COS.",
			},
		},
	}
}

func resourceTencentCloudCvmExportImagesCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cvm_export_images.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		imageId string
	)
	var (
		request  = cvm.NewExportImagesRequest()
		response = cvm.NewExportImagesResponse()
	)

	if v, ok := d.GetOk("image_id"); ok {
		imageId = v.(string)
	}

	if v, ok := d.GetOk("bucket_name"); ok {
		request.BucketName = helper.String(v.(string))
	}

	request.ImageIds = []*string{helper.String(imageId)}

	if v, ok := d.GetOk("export_format"); ok {
		request.ExportFormat = helper.String(v.(string))
	}

	if v, ok := d.GetOk("file_name_prefix_list"); ok {
		request.FileNamePrefixList = []*string{helper.String(v.(string))}
	}

	if v, ok := d.GetOkExists("only_export_root_disk"); ok {
		request.OnlyExportRootDisk = helper.Bool(v.(bool))
	}

	if v, ok := d.GetOkExists("dry_run"); ok {
		request.DryRun = helper.Bool(v.(bool))
	}

	if v, ok := d.GetOk("role_name"); ok {
		request.RoleName = helper.String(v.(string))
	}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCvmClient().ExportImagesWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create cvm export images failed, reason:%+v", logId, err)
		return err
	}

	_ = response

	d.SetId(imageId)

	if err := resourceTencentCloudCvmExportImagesCreateOnExit(ctx); err != nil {
		return err
	}

	return resourceTencentCloudCvmExportImagesRead(d, meta)
}

func resourceTencentCloudCvmExportImagesRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cvm_export_images.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	return nil
}

func resourceTencentCloudCvmExportImagesDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cvm_export_images.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	return nil
}
