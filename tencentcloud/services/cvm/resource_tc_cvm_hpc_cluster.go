// Code generated by iacg; DO NOT EDIT.
package cvm

import (
	"context"
	"fmt"
	"log"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	cvm "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cvm/v20170312"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudCvmHpcCluster() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudCvmHpcClusterCreate,
		Read:   resourceTencentCloudCvmHpcClusterRead,
		Update: resourceTencentCloudCvmHpcClusterUpdate,
		Delete: resourceTencentCloudCvmHpcClusterDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"zone": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Available zone.",
			},

			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Name of Hpc Cluster.",
			},

			"remark": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Remark of Hpc Cluster.",
			},
		},
	}
}

func resourceTencentCloudCvmHpcClusterCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cvm_hpc_cluster.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		hpcClusterId string
	)
	var (
		request  = cvm.NewCreateHpcClusterRequest()
		response = cvm.NewCreateHpcClusterResponse()
	)

	if v, ok := d.GetOk("zone"); ok {
		request.Zone = helper.String(v.(string))
	}

	if v, ok := d.GetOk("name"); ok {
		request.Name = helper.String(v.(string))
	}

	if v, ok := d.GetOk("remark"); ok {
		request.Remark = helper.String(v.(string))
	}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCvmClient().CreateHpcClusterWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create cvm hpc cluster failed, reason:%+v", logId, err)
		return err
	}

	if len(response.Response.HpcClusterSet) < 1 {
		return fmt.Errorf("resource `tencentcloud_cvm_hpc_cluster` create failed.")
	}

	hpcClusterId = *response.Response.HpcClusterSet[0].HpcClusterId

	d.SetId(hpcClusterId)

	return resourceTencentCloudCvmHpcClusterRead(d, meta)
}

func resourceTencentCloudCvmHpcClusterRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cvm_hpc_cluster.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := CvmService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	hpcClusterId := d.Id()

	respData, err := service.DescribeCvmHpcClusterById(ctx, hpcClusterId)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `cvm_hpc_cluster` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}
	if respData.HpcClusterId != nil {
		_ = d.Set("hpc_cluster_id", respData.HpcClusterId)
		hpcClusterId = *respData.HpcClusterId
	}

	if respData.Zone != nil {
		_ = d.Set("zone", respData.Zone)
	}

	if respData.Name != nil {
		_ = d.Set("name", respData.Name)
	}

	if respData.Remark != nil {
		_ = d.Set("remark", respData.Remark)
	}

	return nil
}

func resourceTencentCloudCvmHpcClusterUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cvm_hpc_cluster.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	immutableArgs := []string{"zone"}
	for _, v := range immutableArgs {
		if d.HasChange(v) {
			return fmt.Errorf("argument `%s` cannot be changed", v)
		}
	}
	hpcClusterId := d.Id()

	needChange := false
	mutableArgs := []string{"name", "remark"}
	for _, v := range mutableArgs {
		if d.HasChange(v) {
			needChange = true
			break
		}
	}

	if needChange {
		request := cvm.NewModifyHpcClusterAttributeRequest()

		request.HpcClusterId = &hpcClusterId

		if v, ok := d.GetOk("name"); ok {
			request.Name = helper.String(v.(string))
		}

		if v, ok := d.GetOk("remark"); ok {
			request.Remark = helper.String(v.(string))
		}

		err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCvmClient().ModifyHpcClusterAttributeWithContext(ctx, request)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
			}
			return nil
		})
		if err != nil {
			log.Printf("[CRITAL]%s update cvm hpc cluster failed, reason:%+v", logId, err)
			return err
		}
	}

	return resourceTencentCloudCvmHpcClusterRead(d, meta)
}

func resourceTencentCloudCvmHpcClusterDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cvm_hpc_cluster.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	hpcClusterId := d.Id()

	var (
		request  = cvm.NewDeleteHpcClustersRequest()
		response = cvm.NewDeleteHpcClustersResponse()
	)

	request.HpcClusterIds = []*string{&hpcClusterId}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCvmClient().DeleteHpcClustersWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create cvm hpc cluster failed, reason:%+v", logId, err)
		return err
	}

	_ = response
	return nil
}
