// Code generated by iacg; DO NOT EDIT.
package cvm

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	cvm "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cvm/v20170312"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func DataSourceTencentCloudCvmChcDeniedActions() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudCvmChcDeniedActionsRead,
		Schema: map[string]*schema.Schema{
			"chc_ids": {
				Type:        schema.TypeSet,
				Required:    true,
				Description: "CHC host IDs.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"chc_host_denied_action_set": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "Actions not allowed for the CHC instance.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"chc_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "CHC instance ID.",
						},
						"state": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "CHC instance status.",
						},
						"deny_actions": {
							Type:        schema.TypeSet,
							Computed:    true,
							Description: "Actions not allowed for the current CHC instance.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudCvmChcDeniedActionsRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_cvm_chc_denied_actions.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := CvmService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	if v, ok := d.GetOk("chc_ids"); ok {
		chcIdsList := []*string{}
		chcIdsSet := v.(*schema.Set).List()
		for i := range chcIdsSet {
			chcIds := chcIdsSet[i].(string)
			chcIdsList = append(chcIdsList, helper.String(chcIds))
		}
		paramMap["ChcIds"] = chcIdsList
	}

	var respData []*cvm.ChcHostDeniedActions
	err := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeCvmChcDeniedActionsByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if err != nil {
		return err
	}

	chcIds := make([]string, 0, len(respData))
	chcHostDeniedActionSetList := make([]map[string]interface{}, 0, len(respData))
	if respData != nil {
		for _, chcHostDeniedActionSet := range respData {
			chcHostDeniedActionSetMap := map[string]interface{}{}

			var chcId string
			if chcHostDeniedActionSet.ChcId != nil {
				chcHostDeniedActionSetMap["chc_id"] = chcHostDeniedActionSet.ChcId
				chcId = *chcHostDeniedActionSet.ChcId
			}

			if chcHostDeniedActionSet.State != nil {
				chcHostDeniedActionSetMap["state"] = chcHostDeniedActionSet.State
			}

			if chcHostDeniedActionSet.DenyActions != nil {
				chcHostDeniedActionSetMap["deny_actions"] = chcHostDeniedActionSet.DenyActions
			}

			chcIds = append(chcIds, chcId)
			chcHostDeniedActionSetList = append(chcHostDeniedActionSetList, chcHostDeniedActionSetMap)
		}

		_ = d.Set("chc_host_denied_action_set", chcHostDeniedActionSetList)
	}

	d.SetId(helper.DataResourceIdsHash(chcIds))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), chcHostDeniedActionSetList); e != nil {
			return e
		}
	}

	return nil
}
