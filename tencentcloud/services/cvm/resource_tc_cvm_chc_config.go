// Code generated by iacg; DO NOT EDIT.
package cvm

import (
	"context"
	"log"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	cvm "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cvm/v20170312"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudCvmChcConfig() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudCvmChcConfigCreate,
		Read:   resourceTencentCloudCvmChcConfigRead,
		Update: resourceTencentCloudCvmChcConfigUpdate,
		Delete: resourceTencentCloudCvmChcConfigDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"chc_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "CHC host ID.",
			},

			"instance_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: "CHC host name.",
			},

			"device_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: "Server type.",
			},

			"bmc_user": {
				Type:         schema.TypeString,
				Optional:     true,
				RequiredWith: []string{"password"},
				Description:  "Valid characters: Letters, numbers, hyphens and underscores. Only set when update password.",
			},

			"password": {
				Type:         schema.TypeString,
				Optional:     true,
				Sensitive:    true,
				RequiredWith: []string{"bmc_user"},
				Description:  "The password can contain 8 to 16 characters, including letters, numbers and special symbols (()`~!@#$%^&amp;amp;*-+=_|{}).",
			},

			"bmc_virtual_private_cloud": {
				Type:        schema.TypeList,
				Optional:    true,
				Computed:    true,
				ForceNew:    true,
				MaxItems:    1,
				Description: "Out-of-band network information.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"vpc_id": {
							Type:        schema.TypeString,
							Required:    true,
							ForceNew:    true,
							Description: "VPC ID in the format of vpc-xxx. To obtain valid VPC IDs, you can log in to the [console](https://console.tencentcloud.com/vpc/vpc?rid=1) or call the DescribeVpcEx API and look for the unVpcId fields in the response. If you specify DEFAULT for both VpcId and SubnetId when creating an instance, the default VPC will be used.",
						},
						"subnet_id": {
							Type:        schema.TypeString,
							Required:    true,
							ForceNew:    true,
							Description: "VPC subnet ID in the format subnet-xxx. To obtain valid subnet IDs, you can log in to the [console](https://console.tencentcloud.com/vpc/vpc?rid=1) or call DescribeSubnets and look for the unSubnetId fields in the response. If you specify DEFAULT for both SubnetId and VpcId when creating an instance, the default VPC will be used.",
						},
						"as_vpc_gateway": {
							Type:        schema.TypeBool,
							Optional:    true,
							ForceNew:    true,
							Description: "Whether to use a CVM instance as a public gateway. The public gateway is only available when the instance has a public IP and resides in a VPC. Valid values:&lt;br&gt;&lt;li&gt;TRUE: yes;&lt;br&gt;&lt;li&gt;FALSE: no&lt;br&gt;&lt;br&gt;Default: FALSE.",
						},
						"private_ip_addresses": {
							Type:        schema.TypeList,
							Optional:    true,
							Computed:    true,
							ForceNew:    true,
							Description: "Array of VPC subnet IPs. You can use this parameter when creating instances or modifying VPC attributes of instances. Currently you can specify multiple IPs in one subnet only when creating multiple instances at the same time.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"ipv6_address_count": {
							Type:        schema.TypeInt,
							Optional:    true,
							Computed:    true,
							ForceNew:    true,
							Description: "Number of IPv6 addresses randomly generated for the ENI.",
						},
					},
				},
			},

			"bmc_security_group_ids": {
				Type:         schema.TypeList,
				Optional:     true,
				Computed:     true,
				ForceNew:     true,
				RequiredWith: []string{"bmc_virtual_private_cloud"},
				Description:  "Out-of-band network security group list.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"deploy_virtual_private_cloud": {
				Type:        schema.TypeList,
				Optional:    true,
				Computed:    true,
				ForceNew:    true,
				MaxItems:    1,
				Description: "Deployment network information.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"vpc_id": {
							Type:        schema.TypeString,
							Required:    true,
							ForceNew:    true,
							Description: "VPC ID in the format of vpc-xxx. To obtain valid VPC IDs, you can log in to the [console](https://console.tencentcloud.com/vpc/vpc?rid=1) or call the DescribeVpcEx API and look for the unVpcId fields in the response. If you specify DEFAULT for both VpcId and SubnetId when creating an instance, the default VPC will be used.",
						},
						"subnet_id": {
							Type:        schema.TypeString,
							Required:    true,
							ForceNew:    true,
							Description: "VPC subnet ID in the format subnet-xxx. To obtain valid subnet IDs, you can log in to the [console](https://console.tencentcloud.com/vpc/vpc?rid=1) or call DescribeSubnets and look for the unSubnetId fields in the response. If you specify DEFAULT for both SubnetId and VpcId when creating an instance, the default VPC will be used.",
						},
						"as_vpc_gateway": {
							Type:        schema.TypeBool,
							Optional:    true,
							ForceNew:    true,
							Description: "Whether to use a CVM instance as a public gateway. The public gateway is only available when the instance has a public IP and resides in a VPC. Valid values:&lt;br&gt;&lt;li&gt;TRUE: yes;&lt;br&gt;&lt;li&gt;FALSE: no&lt;br&gt;&lt;br&gt;Default: FALSE.",
						},
						"private_ip_addresses": {
							Type:        schema.TypeList,
							Optional:    true,
							Computed:    true,
							ForceNew:    true,
							Description: "Array of VPC subnet IPs. You can use this parameter when creating instances or modifying VPC attributes of instances. Currently you can specify multiple IPs in one subnet only when creating multiple instances at the same time.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"ipv6_address_count": {
							Type:        schema.TypeInt,
							Optional:    true,
							Computed:    true,
							ForceNew:    true,
							Description: "Number of IPv6 addresses randomly generated for the ENI.",
						},
					},
				},
			},

			"deploy_security_group_ids": {
				Type:         schema.TypeList,
				Optional:     true,
				Computed:     true,
				ForceNew:     true,
				RequiredWith: []string{"deploy_virtual_private_cloud"},
				Description:  "Deployment network security group list.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
		},
	}
}

func resourceTencentCloudCvmChcConfigCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cvm_chc_config.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		chcId string
	)
	d.SetId(chcId)

	if err := resourceTencentCloudCvmChcConfigCreateOnExit(ctx); err != nil {
		return err
	}

	_ = ctx
	return resourceTencentCloudCvmChcConfigRead(d, meta)
}

func resourceTencentCloudCvmChcConfigRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cvm_chc_config.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := CvmService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	chcId := d.Id()

	_ = d.Set("chc_id", chcId)

	respData, err := service.DescribeCvmChcConfigById(ctx, chcId)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `cvm_chc_config` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}
	if respData.ChcId != nil {
		_ = d.Set("chc_id", respData.ChcId)
		chcId = *respData.ChcId
	}

	if respData.InstanceName != nil {
		_ = d.Set("instance_name", respData.InstanceName)
	}

	if respData.DeviceType != nil {
		_ = d.Set("device_type", respData.DeviceType)
	}

	bmcVirtualPrivateCloudMap := map[string]interface{}{}

	if respData.BmcVirtualPrivateCloud != nil {
		if respData.BmcVirtualPrivateCloud.VpcId != nil {
			bmcVirtualPrivateCloudMap["vpc_id"] = respData.BmcVirtualPrivateCloud.VpcId
		}

		if respData.BmcVirtualPrivateCloud.SubnetId != nil {
			bmcVirtualPrivateCloudMap["subnet_id"] = respData.BmcVirtualPrivateCloud.SubnetId
		}

		if respData.BmcVirtualPrivateCloud.AsVpcGateway != nil {
			bmcVirtualPrivateCloudMap["as_vpc_gateway"] = respData.BmcVirtualPrivateCloud.AsVpcGateway
		}

		if respData.BmcVirtualPrivateCloud.PrivateIpAddresses != nil {
			bmcVirtualPrivateCloudMap["private_ip_addresses"] = respData.BmcVirtualPrivateCloud.PrivateIpAddresses
		}

		if respData.BmcVirtualPrivateCloud.Ipv6AddressCount != nil {
			bmcVirtualPrivateCloudMap["ipv6_address_count"] = respData.BmcVirtualPrivateCloud.Ipv6AddressCount
		}

		_ = d.Set("bmc_virtual_private_cloud", []interface{}{bmcVirtualPrivateCloudMap})
	}

	if respData.BmcSecurityGroupIds != nil {
		_ = d.Set("bmc_security_group_ids", respData.BmcSecurityGroupIds)
	}

	deployVirtualPrivateCloudMap := map[string]interface{}{}

	if respData.DeployVirtualPrivateCloud != nil {
		if respData.DeployVirtualPrivateCloud.VpcId != nil {
			deployVirtualPrivateCloudMap["vpc_id"] = respData.DeployVirtualPrivateCloud.VpcId
		}

		if respData.DeployVirtualPrivateCloud.SubnetId != nil {
			deployVirtualPrivateCloudMap["subnet_id"] = respData.DeployVirtualPrivateCloud.SubnetId
		}

		if respData.DeployVirtualPrivateCloud.AsVpcGateway != nil {
			deployVirtualPrivateCloudMap["as_vpc_gateway"] = respData.DeployVirtualPrivateCloud.AsVpcGateway
		}

		if respData.DeployVirtualPrivateCloud.PrivateIpAddresses != nil {
			deployVirtualPrivateCloudMap["private_ip_addresses"] = respData.DeployVirtualPrivateCloud.PrivateIpAddresses
		}

		if respData.DeployVirtualPrivateCloud.Ipv6AddressCount != nil {
			deployVirtualPrivateCloudMap["ipv6_address_count"] = respData.DeployVirtualPrivateCloud.Ipv6AddressCount
		}

		_ = d.Set("deploy_virtual_private_cloud", []interface{}{deployVirtualPrivateCloudMap})
	}

	if respData.DeploySecurityGroupIds != nil {
		_ = d.Set("deploy_security_group_ids", respData.DeploySecurityGroupIds)
	}

	return nil
}

func resourceTencentCloudCvmChcConfigUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cvm_chc_config.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	chcId := d.Id()

	needChange := false
	mutableArgs := []string{"instance_name"}
	for _, v := range mutableArgs {
		if d.HasChange(v) {
			needChange = true
			break
		}
	}

	if needChange {
		request := cvm.NewModifyChcAttributeRequest()

		request.ChcIds = []*string{helper.String(chcId)}

		if v, ok := d.GetOk("instance_name"); ok {
			request.InstanceName = helper.String(v.(string))
		}

		err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCvmClient().ModifyChcAttributeWithContext(ctx, request)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
			}
			return nil
		})
		if err != nil {
			log.Printf("[CRITAL]%s update cvm chc config failed, reason:%+v", logId, err)
			return err
		}
	}

	needChange1 := false
	mutableArgs1 := []string{"device_type"}
	for _, v := range mutableArgs1 {
		if d.HasChange(v) {
			needChange1 = true
			break
		}
	}

	if needChange1 {
		request1 := cvm.NewModifyChcAttributeRequest()

		request1.ChcIds = []*string{helper.String(chcId)}

		if v, ok := d.GetOk("device_type"); ok {
			request1.DeviceType = helper.String(v.(string))
		}

		err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCvmClient().ModifyChcAttributeWithContext(ctx, request1)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request1.GetAction(), request1.ToJsonString(), result.ToJsonString())
			}
			return nil
		})
		if err != nil {
			log.Printf("[CRITAL]%s update cvm chc config failed, reason:%+v", logId, err)
			return err
		}
	}

	needChange2 := false
	mutableArgs2 := []string{"bmc_user", "password"}
	for _, v := range mutableArgs2 {
		if d.HasChange(v) {
			needChange2 = true
			break
		}
	}

	if needChange2 {
		request2 := cvm.NewModifyChcAttributeRequest()

		request2.ChcIds = []*string{helper.String(chcId)}

		if v, ok := d.GetOk("bmc_user"); ok {
			request2.BmcUser = helper.String(v.(string))
		}

		if v, ok := d.GetOk("password"); ok {
			request2.Password = helper.String(v.(string))
		}

		err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCvmClient().ModifyChcAttributeWithContext(ctx, request2)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request2.GetAction(), request2.ToJsonString(), result.ToJsonString())
			}
			return nil
		})
		if err != nil {
			log.Printf("[CRITAL]%s update cvm chc config failed, reason:%+v", logId, err)
			return err
		}
	}

	return resourceTencentCloudCvmChcConfigRead(d, meta)
}

func resourceTencentCloudCvmChcConfigDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cvm_chc_config.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	chcId := d.Id()

	var (
		request  = cvm.NewRemoveChcDeployVpcRequest()
		response = cvm.NewRemoveChcDeployVpcResponse()
	)

	request.ChcIds = []*string{helper.String(chcId)}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCvmClient().RemoveChcDeployVpcWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s delete cvm chc config failed, reason:%+v", logId, err)
		return err
	}

	_ = response
	if err := resourceTencentCloudCvmChcConfigDeletePostHandleResponse0(ctx, response); err != nil {
		return err
	}

	var (
		request1  = cvm.NewRemoveChcAssistVpcRequest()
		response1 = cvm.NewRemoveChcAssistVpcResponse()
	)

	request1.ChcIds = []*string{helper.String(chcId)}

	err = resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCvmClient().RemoveChcAssistVpcWithContext(ctx, request1)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request1.GetAction(), request1.ToJsonString(), result.ToJsonString())
		}
		response1 = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s delete cvm chc config failed, reason:%+v", logId, err)
		return err
	}

	_ = response1
	if err := resourceTencentCloudCvmChcConfigDeletePostHandleResponse1(ctx, response1); err != nil {
		return err
	}

	return nil
}
