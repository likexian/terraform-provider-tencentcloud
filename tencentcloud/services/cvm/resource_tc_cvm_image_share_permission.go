// Code generated by iacg; DO NOT EDIT.
package cvm

import (
	"context"
	"log"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	cvm "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cvm/v20170312"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudCvmImageSharePermission() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudCvmImageSharePermissionCreate,
		Read:   resourceTencentCloudCvmImageSharePermissionRead,
		Update: resourceTencentCloudCvmImageSharePermissionUpdate,
		Delete: resourceTencentCloudCvmImageSharePermissionDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"image_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "Image ID such as `img-gvbnzy6f`. You can only specify an image in the NORMAL state.",
			},

			"account_ids": {
				Type:        schema.TypeSet,
				Required:    true,
				Description: "List of account IDs with which an image is shared.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
		},
	}
}

func resourceTencentCloudCvmImageSharePermissionCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cvm_image_share_permission.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		imageId string
	)
	var (
		request  = cvm.NewModifyImageSharePermissionRequest()
		response = cvm.NewModifyImageSharePermissionResponse()
	)

	if v, ok := d.GetOk("image_id"); ok {
		imageId = v.(string)
	}

	request.ImageId = &imageId

	if v, ok := d.GetOk("account_ids"); ok {
		accountIdsSet := v.(*schema.Set).List()
		for i := range accountIdsSet {
			accountIds := accountIdsSet[i].(string)
			request.AccountIds = append(request.AccountIds, helper.String(accountIds))
		}
	}

	permission := "SHARE"
	request.Permission = &permission

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCvmClient().ModifyImageSharePermissionWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create cvm image share permission failed, reason:%+v", logId, err)
		return err
	}

	_ = response

	d.SetId(imageId)

	return resourceTencentCloudCvmImageSharePermissionRead(d, meta)
}

func resourceTencentCloudCvmImageSharePermissionRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cvm_image_share_permission.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := CvmService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	imageId := d.Id()

	_ = d.Set("image_id", imageId)

	respData, err := service.DescribeCvmImageSharePermissionById(ctx, imageId)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `cvm_image_share_permission` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}
	if err := resourceTencentCloudCvmImageSharePermissionReadPreHandleResponse0(ctx, respData); err != nil {
		return err
	}

	return nil
}

func resourceTencentCloudCvmImageSharePermissionUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cvm_image_share_permission.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	imageId := d.Id()

	if err := resourceTencentCloudCvmImageSharePermissionUpdateOnStart(ctx); err != nil {
		return err
	}

	_ = imageId
	return resourceTencentCloudCvmImageSharePermissionRead(d, meta)
}

func resourceTencentCloudCvmImageSharePermissionDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_cvm_image_share_permission.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	imageId := d.Id()

	var (
		request  = cvm.NewModifyImageSharePermissionRequest()
		response = cvm.NewModifyImageSharePermissionResponse()
	)

	if v, ok := d.GetOk("image_id"); ok {
		request.ImageId = helper.String(v.(string))
	}

	permission := "CANCEL"
	request.Permission = &permission

	if err := resourceTencentCloudCvmImageSharePermissionDeletePostFillRequest0(ctx, request); err != nil {
		return err
	}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCvmClient().ModifyImageSharePermissionWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create cvm image share permission failed, reason:%+v", logId, err)
		return err
	}

	_ = response
	_ = imageId
	return nil
}
