// Code generated by iacg; DO NOT EDIT.
package cvm

import (
	"context"
	"fmt"
	"log"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	cvm "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cvm/v20170312"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
	svctag "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/services/tag"
)

func ResourceTencentCloudImage() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudImageCreate,
		Read:   resourceTencentCloudImageRead,
		Update: resourceTencentCloudImageUpdate,
		Delete: resourceTencentCloudImageDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"image_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Image name.",
			},

			"instance_id": {
				Type:         schema.TypeString,
				Optional:     true,
				ForceNew:     true,
				ExactlyOneOf: []string{"snapshot_ids"},
				Description:  "Cloud server instance ID.",
			},

			"snapshot_ids": {
				Type:         schema.TypeSet,
				Optional:     true,
				ForceNew:     true,
				ExactlyOneOf: []string{"instance_id"},
				Description:  "Cloud disk snapshot ID list; creating a mirror based on a snapshot must include a system disk snapshot. It cannot be passed in simultaneously with InstanceId.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"image_description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Image Description.",
			},

			"force_poweroff": {
				Type:        schema.TypeBool,
				Optional:    true,
				Default:     false,
				Description: "Set whether to force shutdown during mirroring. The default value is `false`, when set to true, it means that the mirror will be made after shutdown.",
			},

			"sysprep": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: "Sysprep function under Windows. When creating a Windows image, you can select true or false to enable or disable the Syspre function.",
			},

			"data_disk_ids": {
				Type:        schema.TypeSet,
				Optional:    true,
				Computed:    true,
				ForceNew:    true,
				Description: "Cloud disk ID list, When creating a whole machine image based on an instance, specify the data disk ID contained in the image.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"tags": {
				Type:        schema.TypeMap,
				Optional:    true,
				Description: "Tag description list.",
			},
		},
	}
}

func resourceTencentCloudImageCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_image.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		imageId string
	)
	var (
		request  = cvm.NewCreateImageRequest()
		response = cvm.NewCreateImageResponse()
	)

	if v, ok := d.GetOk("image_name"); ok {
		request.ImageName = helper.String(v.(string))
	}

	if v, ok := d.GetOk("instance_id"); ok {
		request.InstanceId = helper.String(v.(string))
	}

	if v, ok := d.GetOk("image_description"); ok {
		request.ImageDescription = helper.String(v.(string))
	}

	if v, ok := d.GetOk("data_disk_ids"); ok {
		dataDiskIdsSet := v.(*schema.Set).List()
		for i := range dataDiskIdsSet {
			dataDiskIds := dataDiskIdsSet[i].(string)
			request.DataDiskIds = append(request.DataDiskIds, helper.String(dataDiskIds))
		}
	}

	if v, ok := d.GetOk("snapshot_ids"); ok {
		snapshotIdsSet := v.(*schema.Set).List()
		for i := range snapshotIdsSet {
			snapshotIds := snapshotIdsSet[i].(string)
			request.SnapshotIds = append(request.SnapshotIds, helper.String(snapshotIds))
		}
	}

	if err := resourceTencentCloudImageCreatePostFillRequest0(ctx, request); err != nil {
		return err
	}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCvmClient().CreateImageWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create image failed, reason:%+v", logId, err)
		return err
	}

	imageId = *response.Response.ImageId

	if err := resourceTencentCloudImageCreatePostHandleResponse0(ctx, response); err != nil {
		return err
	}

	d.SetId(imageId)

	if tags := helper.GetTags(d, "tags"); len(tags) > 0 {
		tagService := svctag.NewTagService(meta.(tccommon.ProviderMeta).GetAPIV3Conn())
		region := meta.(tccommon.ProviderMeta).GetAPIV3Conn().Region
		resourceName := fmt.Sprintf("qcs::cvm:%s:uin/:image/%s", region, d.Id())
		if err := tagService.ModifyTags(ctx, resourceName, tags, nil); err != nil {
			return err
		}
	}

	return resourceTencentCloudImageRead(d, meta)
}

func resourceTencentCloudImageRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_image.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := CvmService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	imageId := d.Id()

	var respData *cvm.Image
	err := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeImageById(ctx, imageId)
		if e != nil {
			return tccommon.RetryError(e)
		}
		if err := resourceTencentCloudImageReadRequestOnSuccess0(ctx, result); err != nil {
			return err
		}
		respData = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s read image failed, reason:%+v", logId, err)
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `image` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}
	if respData.ImageName != nil {
		_ = d.Set("image_name", respData.ImageName)
	}

	if respData.ImageDescription != nil {
		_ = d.Set("image_description", respData.ImageDescription)
	}

	if err := resourceTencentCloudImageReadPostHandleResponse0(ctx, respData); err != nil {
		return err
	}

	tcClient := meta.(tccommon.ProviderMeta).GetAPIV3Conn()
	tagService := svctag.NewTagService(tcClient)
	tags, err := tagService.DescribeResourceTags(ctx, "cvm", "image", tcClient.Region, d.Id())
	if err != nil {
		return err
	}
	_ = d.Set("tags", tags)

	return nil
}

func resourceTencentCloudImageUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_image.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	imageId := d.Id()

	needChange := false
	mutableArgs := []string{"image_name", "image_description"}
	for _, v := range mutableArgs {
		if d.HasChange(v) {
			needChange = true
			break
		}
	}

	if needChange {
		request := cvm.NewModifyImageAttributeRequest()

		request.ImageId = helper.String(imageId)

		if v, ok := d.GetOk("image_name"); ok {
			request.ImageName = helper.String(v.(string))
		}

		if v, ok := d.GetOk("image_description"); ok {
			request.ImageDescription = helper.String(v.(string))
		}

		err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCvmClient().ModifyImageAttributeWithContext(ctx, request)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
			}
			return nil
		})
		if err != nil {
			log.Printf("[CRITAL]%s update image failed, reason:%+v", logId, err)
			return err
		}
	}

	if d.HasChange("tags") {
		ctx := context.WithValue(context.TODO(), tccommon.LogIdKey, logId)
		tcClient := meta.(tccommon.ProviderMeta).GetAPIV3Conn()
		tagService := svctag.NewTagService(tcClient)
		oldTags, newTags := d.GetChange("tags")
		replaceTags, deleteTags := svctag.DiffTags(oldTags.(map[string]interface{}), newTags.(map[string]interface{}))
		resourceName := tccommon.BuildTagResourceName("cvm", "image", tcClient.Region, d.Id())
		if err := tagService.ModifyTags(ctx, resourceName, replaceTags, deleteTags); err != nil {
			return err
		}
	}

	return resourceTencentCloudImageRead(d, meta)
}

func resourceTencentCloudImageDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_image.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	imageId := d.Id()

	var (
		request  = cvm.NewDeleteImagesRequest()
		response = cvm.NewDeleteImagesResponse()
	)

	request.ImageIds = []*string{helper.String(imageId)}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCvmClient().DeleteImagesWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s delete image failed, reason:%+v", logId, err)
		return err
	}

	_ = response
	if err := resourceTencentCloudImageDeletePostHandleResponse0(ctx, response); err != nil {
		return err
	}

	return nil
}
