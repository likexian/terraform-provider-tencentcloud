// Code generated by iacg; DO NOT EDIT.
package cvm

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	cvm "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cvm/v20170312"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func DataSourceTencentCloudReservedInstanceConfigs() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudReservedInstanceConfigsRead,
		Schema: map[string]*schema.Schema{
			"availability_zone": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "The available zone that the reserved instance locates at.",
			},

			"duration": {
				Type:         schema.TypeInt,
				Optional:     true,
				Description:  "Validity period of the reserved instance. Valid values are `31536000`(1 year) and `94608000`(3 years).",
				ValidateFunc: tccommon.ValidateAllowedIntValue([]int{31536000, 94608000}),
			},

			"instance_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "The type of reserved instance.",
			},

			"offering_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Filter by Payment Type. Such as All Upfront.",
			},

			"product_description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Filter by the Platform Description (that is, operating system) for Reserved Instance billing. Shaped like: linux.",
			},

			"config_list": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "An information list of reserved instance configuration. Each element contains the following attributes:",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"config_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Configuration ID of the purchasable reserved instance.",
						},
						"availability_zone": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Availability zone of the purchasable reserved instance.",
						},
						"instance_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Instance type of the reserved instance.",
						},
						"duration": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Validity period of the reserved instance.",
						},
						"price": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: "Purchase price of the reserved instance.",
						},
						"currency_code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Settlement currency of the reserved instance, which is a standard currency code as listed in ISO 4217.",
						},
						"platform": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Platform of the reserved instance.",
						},
						"offering_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "OfferingType of the reserved instance.",
						},
						"usage_price": {
							Type:        schema.TypeFloat,
							Computed:    true,
							Description: "UsagePrice of the reserved instance.",
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudReservedInstanceConfigsRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_reserved_instance_configs.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := CvmService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	var filtersList []*cvm.Filter
	filtersMap := map[string]*cvm.Filter{}
	filter := cvm.Filter{}
	name := "zone"
	filter.Name = &name
	if v, ok := d.GetOk("availability_zone"); ok {
		filter.Values = []*string{helper.String(v.(string))}
	}
	filtersMap["Temp0"] = &filter
	if v, ok := filtersMap["Temp0"]; ok {
		filtersList = append(filtersList, v)
	}
	filter2 := cvm.Filter{}
	name2 := "duration"
	filter2.Name = &name2
	if v, ok := d.GetOk("duration"); ok {
		filter2.Values = []*string{helper.String(v.(string))}
	}
	filtersMap["Temp1"] = &filter2
	if v, ok := filtersMap["Temp1"]; ok {
		filtersList = append(filtersList, v)
	}
	filter3 := cvm.Filter{}
	name3 := "instance-type"
	filter3.Name = &name3
	if v, ok := d.GetOk("instance_type"); ok {
		filter3.Values = []*string{helper.String(v.(string))}
	}
	filtersMap["Temp2"] = &filter3
	if v, ok := filtersMap["Temp2"]; ok {
		filtersList = append(filtersList, v)
	}
	filter4 := cvm.Filter{}
	name4 := "offering-type"
	filter4.Name = &name4
	if v, ok := d.GetOk("offering_type"); ok {
		filter4.Values = []*string{helper.String(v.(string))}
	}
	filtersMap["Temp3"] = &filter4
	if v, ok := filtersMap["Temp3"]; ok {
		filtersList = append(filtersList, v)
	}
	filter5 := cvm.Filter{}
	name5 := "product-description"
	filter5.Name = &name5
	if v, ok := d.GetOk("product_description"); ok {
		filter5.Values = []*string{helper.String(v.(string))}
	}
	filtersMap["Temp4"] = &filter5
	if v, ok := filtersMap["Temp4"]; ok {
		filtersList = append(filtersList, v)
	}
	paramMap["Filters"] = filtersList

	var respData []*cvm.ReservedInstancesOffering
	err := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeReservedInstanceConfigsByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if err != nil {
		return err
	}

	var ids []string
	reservedInstancesOfferingsSetList := make([]map[string]interface{}, 0, len(respData))
	if respData != nil {
		for _, reservedInstancesOfferingsSet := range respData {
			reservedInstancesOfferingsSetMap := map[string]interface{}{}

			var reservedInstancesOfferingId string
			if reservedInstancesOfferingsSet.ReservedInstancesOfferingId != nil {
				reservedInstancesOfferingsSetMap["config_id"] = reservedInstancesOfferingsSet.ReservedInstancesOfferingId
				reservedInstancesOfferingId = *reservedInstancesOfferingsSet.ReservedInstancesOfferingId
			}

			if reservedInstancesOfferingsSet.Zone != nil {
				reservedInstancesOfferingsSetMap["availability_zone"] = reservedInstancesOfferingsSet.Zone
			}

			if reservedInstancesOfferingsSet.InstanceType != nil {
				reservedInstancesOfferingsSetMap["instance_type"] = reservedInstancesOfferingsSet.InstanceType
			}

			if reservedInstancesOfferingsSet.Duration != nil {
				reservedInstancesOfferingsSetMap["duration"] = reservedInstancesOfferingsSet.Duration
			}

			if reservedInstancesOfferingsSet.FixedPrice != nil {
				reservedInstancesOfferingsSetMap["price"] = reservedInstancesOfferingsSet.FixedPrice
			}

			if reservedInstancesOfferingsSet.CurrencyCode != nil {
				reservedInstancesOfferingsSetMap["currency_code"] = reservedInstancesOfferingsSet.CurrencyCode
			}

			if reservedInstancesOfferingsSet.ProductDescription != nil {
				reservedInstancesOfferingsSetMap["platform"] = reservedInstancesOfferingsSet.ProductDescription
			}

			if reservedInstancesOfferingsSet.OfferingType != nil {
				reservedInstancesOfferingsSetMap["offering_type"] = reservedInstancesOfferingsSet.OfferingType
			}

			if reservedInstancesOfferingsSet.UsagePrice != nil {
				reservedInstancesOfferingsSetMap["usage_price"] = reservedInstancesOfferingsSet.UsagePrice
			}

			ids = append(ids, reservedInstancesOfferingId)
			reservedInstancesOfferingsSetList = append(reservedInstancesOfferingsSetList, reservedInstancesOfferingsSetMap)
		}

		_ = d.Set("config_list", reservedInstancesOfferingsSetList)
	}

	d.SetId(helper.DataResourceIdsHash(ids))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), reservedInstancesOfferingsSetList); e != nil {
			return e
		}
	}

	return nil
}
