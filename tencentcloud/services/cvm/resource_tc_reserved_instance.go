// Code generated by iacg; DO NOT EDIT.
package cvm

import (
	"context"
	"log"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	cvm "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cvm/v20170312"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudReservedInstance() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudReservedInstanceCreate,
		Read:   resourceTencentCloudReservedInstanceRead,
		Update: resourceTencentCloudReservedInstanceUpdate,
		Delete: resourceTencentCloudReservedInstanceDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"config_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Configuration ID of the reserved instance.",
			},

			"instance_count": {
				Type:         schema.TypeInt,
				Required:     true,
				Description:  "Number of reserved instances to be purchased.",
				ValidateFunc: tccommon.ValidateIntegerMin(1),
			},

			"reserved_instance_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Reserved Instance display name.\n\t\t\t\t- If you do not specify an instance display name, 'Unnamed' is displayed by default.\n\t\t\t\t- Up to 60 characters (including pattern strings) are supported.",
			},

			"start_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Start time of the RI.",
			},

			"end_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Expiry time of the RI.",
			},

			"status": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Status of the RI at the time of purchase.",
			},
		},
	}
}

func resourceTencentCloudReservedInstanceCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_reserved_instance.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		reservedInstanceId string
	)
	var (
		request  = cvm.NewPurchaseReservedInstancesOfferingRequest()
		response = cvm.NewPurchaseReservedInstancesOfferingResponse()
	)

	if v, ok := d.GetOk("config_id"); ok {
		request.ReservedInstancesOfferingId = helper.String(v.(string))
	}

	if v, ok := d.GetOkExists("instance_count"); ok {
		request.InstanceCount = helper.IntInt64(v.(int))
	}

	if v, ok := d.GetOk("reserved_instance_name"); ok {
		request.ReservedInstanceName = helper.String(v.(string))
	}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseCvmClient().PurchaseReservedInstancesOfferingWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create reserved instance failed, reason:%+v", logId, err)
		return err
	}

	reservedInstanceId = *response.Response.ReservedInstanceId

	d.SetId(reservedInstanceId)

	return resourceTencentCloudReservedInstanceRead(d, meta)
}

func resourceTencentCloudReservedInstanceRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_reserved_instance.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := CvmService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	reservedInstanceId := d.Id()

	respData, err := service.DescribeReservedInstanceById(ctx, reservedInstanceId)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `reserved_instance` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}
	if respData.InstanceCount != nil {
		_ = d.Set("instance_count", respData.InstanceCount)
	}

	if respData.StartTime != nil {
		_ = d.Set("start_time", respData.StartTime)
	}

	if respData.EndTime != nil {
		_ = d.Set("end_time", respData.EndTime)
	}

	if respData.State != nil {
		_ = d.Set("status", respData.State)
	}

	if respData.ReservedInstanceName != nil {
		_ = d.Set("reserved_instance_name", respData.ReservedInstanceName)
	}

	return nil
}

func resourceTencentCloudReservedInstanceUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_reserved_instance.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	reservedInstanceId := d.Id()

	if err := resourceTencentCloudReservedInstanceUpdateOnStart(ctx); err != nil {
		return err
	}

	_ = reservedInstanceId
	return resourceTencentCloudReservedInstanceRead(d, meta)
}

func resourceTencentCloudReservedInstanceDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_reserved_instance.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	reservedInstanceId := d.Id()

	_ = reservedInstanceId
	_ = ctx
	return nil
}
