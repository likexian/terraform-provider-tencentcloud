// Code generated by iacg; DO NOT EDIT.
package waf

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	wafv20180125 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/waf/v20180125"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudWafSaasIpAccessControl() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudWafSaasIpAccessControlCreate,
		Read:   resourceTencentCloudWafSaasIpAccessControlRead,
		Update: resourceTencentCloudWafSaasIpAccessControlUpdate,
		Delete: resourceTencentCloudWafSaasIpAccessControlDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"domain": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "Specific domain name, for example, test.qcloudwaf.com.\nGlobal domain name, that is, global.",
			},

			"ip_list": {
				Type:        schema.TypeSet,
				Required:    true,
				Description: "IP parameter list.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"action_type": {
				Type:        schema.TypeInt,
				Required:    true,
				ForceNew:    true,
				Description: "42: blocklist; 40: allowlist.",
			},

			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "Instance ID.",
			},

			"note": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Remarks.",
			},

			"job_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: "Scheduled configuration type.",
			},

			"job_date_time": {
				Type:        schema.TypeList,
				Optional:    true,
				Computed:    true,
				MaxItems:    1,
				Description: "Details of scheduled configuration.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"timed": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "Time parameters for scheduled execution\nNote: This field may return null, indicating that no valid values can be obtained.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"start_date_time": {
										Type:        schema.TypeInt,
										Optional:    true,
										Description: "Start timestamp, in seconds\nNote: This field may return null, indicating that no valid values can be obtained.",
									},
									"end_date_time": {
										Type:        schema.TypeInt,
										Optional:    true,
										Description: "End timestamp, in seconds\nNote: This field may return null, indicating that no valid values can be obtained.",
									},
								},
							},
						},
						"cron": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "Time parameters for periodic execution\nNote: This field may return null, indicating that no valid values can be obtained.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"days": {
										Type:        schema.TypeSet,
										Optional:    true,
										Description: "Days in each month for execution\nNote: This field may return null, indicating that no valid values can be obtained.",
										Elem: &schema.Schema{
											Type: schema.TypeInt,
										},
									},
									"w_days": {
										Type:        schema.TypeSet,
										Optional:    true,
										Description: "Days of each week for execution\nNote: This field may return null, indicating that no valid values can be obtained.",
										Elem: &schema.Schema{
											Type: schema.TypeInt,
										},
									},
									"start_time": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Start time\n\nNote: This field may return null, indicating that no valid values can be obtained.",
									},
									"end_time": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "End time\n\nNote: This field may return null, indicating that no valid values can be obtained.",
									},
								},
							},
						},
						"time_t_zone": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Time zone\nNote: This field may return null, indicating that no valid values can be obtained.",
						},
					},
				},
			},
		},
	}
}

func resourceTencentCloudWafSaasIpAccessControlCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_waf_saas_ip_access_control.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		instanceId string
		domain     string
		ruleId     uint64
	)
	var (
		request  = wafv20180125.NewCreateIpAccessControlRequest()
		response = wafv20180125.NewCreateIpAccessControlResponse()
	)

	if v, ok := d.GetOk("instance_id"); ok {
		instanceId = v.(string)
	}
	if v, ok := d.GetOk("domain"); ok {
		domain = v.(string)
	}

	if v, ok := d.GetOk("domain"); ok {
		request.Domain = helper.String(v.(string))
	}

	if v, ok := d.GetOk("ip_list"); ok {
		ipListSet := v.(*schema.Set).List()
		for i := range ipListSet {
			ipList := ipListSet[i].(string)
			request.IpList = append(request.IpList, helper.String(ipList))
		}
	}

	if v, ok := d.GetOkExists("action_type"); ok {
		request.ActionType = helper.IntInt64(v.(int))
	}

	if v, ok := d.GetOk("instance_id"); ok {
		request.InstanceId = helper.String(v.(string))
	}

	edition := "sparta-waf"
	request.Edition = &edition

	sourceType := "custom"
	request.SourceType = &sourceType

	if v, ok := d.GetOk("note"); ok {
		request.Note = helper.String(v.(string))
	}

	if v, ok := d.GetOk("job_type"); ok {
		request.JobType = helper.String(v.(string))
	}

	if jobDateTimeMap, ok := helper.InterfacesHeadMap(d, "job_date_time"); ok {
		jobDateTime := wafv20180125.JobDateTime{}
		if v, ok := jobDateTimeMap["timed"]; ok {
			for _, item := range v.([]interface{}) {
				timedMap := item.(map[string]interface{})
				timedJob := wafv20180125.TimedJob{}
				if v, ok := timedMap["start_date_time"]; ok {
					timedJob.StartDateTime = helper.IntUint64(v.(int))
				}
				if v, ok := timedMap["end_date_time"]; ok {
					timedJob.EndDateTime = helper.IntUint64(v.(int))
				}
				jobDateTime.Timed = append(jobDateTime.Timed, &timedJob)
			}
		}
		if v, ok := jobDateTimeMap["cron"]; ok {
			for _, item := range v.([]interface{}) {
				cronMap := item.(map[string]interface{})
				cronJob := wafv20180125.CronJob{}
				if v, ok := cronMap["days"]; ok {
					daysSet := v.(*schema.Set).List()
					for i := range daysSet {
						days := daysSet[i].(int)
						cronJob.Days = append(cronJob.Days, helper.IntUint64(days))
					}
				}
				if v, ok := cronMap["w_days"]; ok {
					wDaysSet := v.(*schema.Set).List()
					for i := range wDaysSet {
						wDays := wDaysSet[i].(int)
						cronJob.WDays = append(cronJob.WDays, helper.IntUint64(wDays))
					}
				}
				if v, ok := cronMap["start_time"]; ok {
					cronJob.StartTime = helper.String(v.(string))
				}
				if v, ok := cronMap["end_time"]; ok {
					cronJob.EndTime = helper.String(v.(string))
				}
				jobDateTime.Cron = append(jobDateTime.Cron, &cronJob)
			}
		}
		if v, ok := jobDateTimeMap["time_t_zone"]; ok {
			jobDateTime.TimeTZone = helper.String(v.(string))
		}
		request.JobDateTime = &jobDateTime
	}

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseWafV20180125Client().CreateIpAccessControlWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create waf saas ip access control failed, reason:%+v", logId, err)
		return err
	}

	ruleId = *response.Response.RuleId

	d.SetId(strings.Join([]string{instanceId, domain, helper.UInt64ToStr(ruleId)}, tccommon.FILED_SP))

	return resourceTencentCloudWafSaasIpAccessControlRead(d, meta)
}

func resourceTencentCloudWafSaasIpAccessControlRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_waf_saas_ip_access_control.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := WafService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 3 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	instanceId := idSplit[0]
	domain := idSplit[1]
	ruleId := idSplit[2]

	_ = d.Set("instance_id", instanceId)

	_ = d.Set("domain", domain)

	respData, err := service.DescribeWafSaasIpAccessControlById(ctx, domain, ruleId)
	if err != nil {
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `waf_saas_ip_access_control` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}
	if err := resourceTencentCloudWafSaasIpAccessControlReadPostHandleResponse0(ctx, respData); err != nil {
		return err
	}

	_ = instanceId
	return nil
}

func resourceTencentCloudWafSaasIpAccessControlUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_waf_saas_ip_access_control.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 3 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	instanceId := idSplit[0]
	domain := idSplit[1]
	ruleId := idSplit[2]

	needChange := false
	mutableArgs := []string{"ip_list", "note", "job_type", "job_date_time"}
	for _, v := range mutableArgs {
		if d.HasChange(v) {
			needChange = true
			break
		}
	}

	if needChange {
		request := wafv20180125.NewModifyIpAccessControlRequest()

		if v, ok := d.GetOk("ip_list"); ok {
			ipListSet := v.(*schema.Set).List()
			for i := range ipListSet {
				ipList := ipListSet[i].(string)
				request.IpList = append(request.IpList, helper.String(ipList))
			}
		}

		if v, ok := d.GetOk("note"); ok {
			request.Note = helper.String(v.(string))
		}

		if v, ok := d.GetOk("job_type"); ok {
			request.JobType = helper.String(v.(string))
		}

		if jobDateTimeMap, ok := helper.InterfacesHeadMap(d, "job_date_time"); ok {
			jobDateTime := wafv20180125.JobDateTime{}
			if v, ok := jobDateTimeMap["timed"]; ok {
				for _, item := range v.([]interface{}) {
					timedMap := item.(map[string]interface{})
					timedJob := wafv20180125.TimedJob{}
					if v, ok := timedMap["start_date_time"]; ok {
						timedJob.StartDateTime = helper.IntUint64(v.(int))
					}
					if v, ok := timedMap["end_date_time"]; ok {
						timedJob.EndDateTime = helper.IntUint64(v.(int))
					}
					jobDateTime.Timed = append(jobDateTime.Timed, &timedJob)
				}
			}
			if v, ok := jobDateTimeMap["cron"]; ok {
				for _, item := range v.([]interface{}) {
					cronMap := item.(map[string]interface{})
					cronJob := wafv20180125.CronJob{}
					if v, ok := cronMap["days"]; ok {
						daysSet := v.(*schema.Set).List()
						for i := range daysSet {
							days := daysSet[i].(int)
							cronJob.Days = append(cronJob.Days, helper.IntUint64(days))
						}
					}
					if v, ok := cronMap["w_days"]; ok {
						wDaysSet := v.(*schema.Set).List()
						for i := range wDaysSet {
							wDays := wDaysSet[i].(int)
							cronJob.WDays = append(cronJob.WDays, helper.IntUint64(wDays))
						}
					}
					if v, ok := cronMap["start_time"]; ok {
						cronJob.StartTime = helper.String(v.(string))
					}
					if v, ok := cronMap["end_time"]; ok {
						cronJob.EndTime = helper.String(v.(string))
					}
					jobDateTime.Cron = append(jobDateTime.Cron, &cronJob)
				}
			}
			if v, ok := jobDateTimeMap["time_t_zone"]; ok {
				jobDateTime.TimeTZone = helper.String(v.(string))
			}
			request.JobDateTime = &jobDateTime
		}

		err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			if err := resourceTencentCloudWafSaasIpAccessControlUpdatePreRequest0(ctx, request); err != nil {
				return err
			}

			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseWafV20180125Client().ModifyIpAccessControlWithContext(ctx, request)
			if e != nil {
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
			}
			return nil
		})
		if err != nil {
			log.Printf("[CRITAL]%s update waf saas ip access control failed, reason:%+v", logId, err)
			return err
		}
	}

	_ = instanceId
	_ = domain
	_ = ruleId
	return resourceTencentCloudWafSaasIpAccessControlRead(d, meta)
}

func resourceTencentCloudWafSaasIpAccessControlDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_waf_saas_ip_access_control.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	idSplit := strings.Split(d.Id(), tccommon.FILED_SP)
	if len(idSplit) != 3 {
		return fmt.Errorf("id is broken,%s", d.Id())
	}
	instanceId := idSplit[0]
	domain := idSplit[1]
	ruleId := idSplit[2]

	var (
		request  = wafv20180125.NewDeleteIpAccessControlV2Request()
		response = wafv20180125.NewDeleteIpAccessControlV2Response()
	)

	request.Domain = helper.String(domain)

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		if err := resourceTencentCloudWafSaasIpAccessControlDeletePreRequest0(ctx, request); err != nil {
			return err
		}

		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseWafV20180125Client().DeleteIpAccessControlV2WithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s delete waf saas ip access control failed, reason:%+v", logId, err)
		return err
	}

	_ = response
	_ = instanceId
	_ = ruleId
	return nil
}
