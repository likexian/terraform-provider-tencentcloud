// Code generated by iacg; DO NOT EDIT.
package privatedns

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	privatednsv20201028 "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/privatedns/v20201028"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func DataSourceTencentCloudPrivateDnsAccounts() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudPrivateDnsAccountsRead,
		Schema: map[string]*schema.Schema{
			"filters": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "Filter parameters.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Parameter name.",
						},
						"values": {
							Type:        schema.TypeSet,
							Required:    true,
							Description: "Array of parameter values.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"account_set": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "List of Private DNS accounts.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"uin": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Root account UIN.",
						},
						"account": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Root account name.",
						},
						"nickname": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Account name.",
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudPrivateDnsAccountsRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_private_dns_accounts.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := PrivatednsService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	paramMap := make(map[string]interface{})
	if v, ok := d.GetOk("filters"); ok {
		filtersSet := v.([]interface{})
		tmpSet := make([]*privatednsv20201028.Filter, 0, len(filtersSet))
		for _, item := range filtersSet {
			filtersMap := item.(map[string]interface{})
			filter := privatednsv20201028.Filter{}
			if v, ok := filtersMap["name"]; ok {
				filter.Name = helper.String(v.(string))
			}
			if v, ok := filtersMap["values"]; ok {
				valuesSet := v.(*schema.Set).List()
				for i := range valuesSet {
					values := valuesSet[i].(string)
					filter.Values = append(filter.Values, helper.String(values))
				}
			}
			tmpSet = append(tmpSet, &filter)
		}
		paramMap["Filters"] = tmpSet
	}

	var respData []*privatednsv20201028.PrivateDNSAccount
	err := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribePrivateDnsAccountsByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if err != nil {
		return err
	}

	var ids []string
	accountSetList := make([]map[string]interface{}, 0, len(respData))
	if respData != nil {
		for _, accountSet := range respData {
			accountSetMap := map[string]interface{}{}

			var uin string
			if accountSet.Uin != nil {
				accountSetMap["uin"] = accountSet.Uin
				uin = *accountSet.Uin
			}

			if accountSet.Account != nil {
				accountSetMap["account"] = accountSet.Account
			}

			if accountSet.Nickname != nil {
				accountSetMap["nickname"] = accountSet.Nickname
			}

			ids = append(ids, uin)
			accountSetList = append(accountSetList, accountSetMap)
		}

		_ = d.Set("account_set", accountSetList)
	}

	d.SetId(helper.DataResourceIdsHash(ids))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), accountSetList); e != nil {
			return e
		}
	}

	return nil
}
