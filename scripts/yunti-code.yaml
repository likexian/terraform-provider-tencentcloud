tencentcloud/connectivity/client.go:
  import: "billing \"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/billing/v20180709\""
  client: "billingConn        *billing.Client"
  useClient: |
    func (me *TencentCloudClient) UseBillingClient() *billing.Client {
        if me.billingConn != nil {
          return me.billingConn
        }

        cpf := me.NewClientProfile(300)
        me.billingConn, _ = billing.NewClient(me.Credential, me.Region, cpf)
        me.billingConn.WithHttpTransport(&LogRoundTripper{})

        return me.billingConn
    }

tencentcloud/extension_billing.go:
  all: |
    package tencentcloud

    var TRADE_RETRYABLE_ERROR = []string{
      "InternalError.TradeError",  //mysql
      "FailedOperation.PayFailed", //redis
    }

    // deal status: https://cloud.tencent.com/document/product/555/19179

    var DEAL_STATUS_CODE = []int64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}

    var DEAL_TERMINATE_STATUS_CODE = []int64{4, 5, 6, 7, 8, 9, 10, 11}

tencentcloud/internal/helper/transform.go:
  a: |
    func BoolToStr(b bool) (s string) {
      s = "false"
      if b {
        s = "true"
      }
      return
    }
tencentcloud/provider.go:
  a: "	PROVIDER_ENABLE_YUNTI                 = \"TENCENTCLOUD_ENABLE_YUNTI\""
  b: |
    "enable_bpass": {
    Type:        schema.TypeBool,
    Optional:    true,
    Default:     false,
    DefaultFunc: schema.EnvDefaultFunc(PROVIDER_ENABLE_YUNTI, nil),
    Description: "Use the yunti account or not, Default is `false`.",
    },
tencentcloud/resource_tc_cynosdb_cluster.go:
  a: |
    billingService = BillingService{client: client}
  b: "	var id string"
  c: "	var chargeTypeStr string"
  d: "		chargeTypeStr = v.(string)"
  e: |
    if chargeTypeStr == CYNOSDB_CHARGE_TYPE_PREPAID {
    	regx := "\"dealNames\":\\[\"(.*)\"\\]"
    	// query deal by bpass
    	resourceId, billErr := billingService.QueryDealByBpass(ctx, regx, err)
    	if billErr != nil {
    		log.Printf("[CRITAL]%s api[QueryDealByBpass] fail, reason[%s]\n", logId, billErr.Error())
    		return resource.NonRetryableError(billErr)
    	}
    	// yunti prepaid user
    	if resourceId != nil {
    		id = *resourceId
    		return nil
    	}
    }
  f: |
    // normal user
    if !billingService.isYunTiAccount() {
    	id = *dealRes.Response.BillingResourceInfos[0].ClusterId
    }
  g: |
    // set tag before query the instance
    	if tags := helper.GetTags(d, "tags"); len(tags) > 0 {
    		resourceName := BuildTagResourceName("cynosdb", "cluster", region, id)
    		if err := tagService.ModifyTags(ctx, resourceName, tags, nil); err != nil {
    			return err
    		}

    		// Wait the tags enabled
    		err = tagService.waitTagsEnable(ctx, "cynosdb", "cluster", id, region, tags)
    		if err != nil {
    			return err
    		}
    	}
  h: |
    // Wait the tags enabled
    err := tagService.waitTagsEnable(ctx, "cynosdb", "cluster", d.Id(), region, replaceTags)
    if err != nil {
    	return err
    }

tencentcloud/resource_tc_elasticsearch_instance.go:
  a: |
    var (
    	client               = meta.(*TencentCloudClient).apiV3Conn
    	elasticsearchService = ElasticsearchService{client: client}
    	billingService       = BillingService{client: client}
    	tagService           = TagService{client: client}
    	region               = client.Region
    	chargeType           string

    	request = es.NewCreateInstanceRequest()
    )
  b: "chargeType = v.(string)"
  c: |
    var tags map[string]string
    	if tags = helper.GetTags(d, "tags"); len(tags) > 0 {
    		if billingService.isYunTiAccount() {
    			request.TagList = make([]*es.TagInfo, 0, len(tags))
    			for k, v := range tags {
    				tagInfo := &es.TagInfo{
    					TagKey:   helper.String(k),
    					TagValue: helper.String(v),
    				}
    				request.TagList = append(request.TagList, tagInfo)
    			}
    		}
    	}
  d: |
    if chargeType == ES_CHARGE_TYPE_PREPAID {
    	regx := "\"dealNames\":\\[\"(.*)\"\\]"
    	// query deal by bpass
    	id, billErr := billingService.QueryDealByBpass(ctx, regx, err)
    	if billErr != nil {
    		log.Printf("[CRITAL]%s api[QueryDealByBpass] fail, reason[%s]\n", logId, billErr.Error())
    		return resource.NonRetryableError(billErr)
    	}
    	// yunti prepaid user
    	if id != nil {
    		instanceId = *id
    		return nil
    	}
    }
  e: |
    // set tag before query the instance
    	if len(tags) > 0 {
    		// resourceName := fmt.Sprintf("qcs::es:%s:uin/:instance/%s", region, instanceId)
    		resourceName := BuildTagResourceName("es", "instance", region, d.Id())
    		if err := tagService.ModifyTags(ctx, resourceName, tags, nil); err != nil {
    			return err
    		}

    		// Wait the tags enabled
    		err = tagService.waitTagsEnable(ctx, "es", "instance", d.Id(), region, tags)
    		if err != nil {
    			return err
    		}
    	}
  f: |
    // resourceName := fmt.Sprintf("qcs::es:%s:uin/:instance/%s", region, instanceId)
    resourceName := BuildTagResourceName("es", "instance", region, d.Id())
    if err := tagService.ModifyTags(ctx, resourceName, replaceTags, deleteTags); err != nil {
    	return err
    }

    // Wait the tags enabled
    err := tagService.waitTagsEnable(ctx, "es", "instance", d.Id(), region, replaceTags)

tencentcloud/resource_tc_mongodb_instance.go:
  import: "	sdkErrors \"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/errors\""
  bpass: |
    // query deal by bpass
    e, ok := err.(*sdkErrors.TencentCloudSDKError)
    log.Printf("[DEBUG]%s query deal for PREPAID user, msg:[%s] \n", logId, e.Error())

    if ok && IsContains("InvalidParameterValue.InvalidTradeOperation", e.Code) {
    	// yunti prepaid user
    	return retryError(fmt.Errorf("[DEBUG] wait pass the bpass for yunti prepaid user, retry... error msg:[%s]", e.Message))
    }

    // if id != nil {
    // 	// yunti prepaid user
    // 	resourceId = *id
    // 	return nil
    // }
  setTag: |
    // set tag before query the instance
    	if tags := helper.GetTags(d, "tags"); len(tags) > 0 {
    		resourceName := BuildTagResourceName("mongodb", "instance", region, instanceId)
    		if err := tagService.ModifyTags(ctx, resourceName, tags, nil); err != nil {
    			return err
    		}

    		// Wait the tags enabled
    		err := tagService.waitTagsEnable(ctx, "mongodb", "instance", instanceId, region, tags)
    		if err != nil {
    			return err
    		}
    	}

tencentcloud/resource_tc_mysql_instance.go:
  var: |
    client := meta.(*TencentCloudClient).apiV3Conn
    billingService := BillingService{client: client}
    var instanceId string
  bpass: |
    // query deal by bpass
    regx := "dealNames:\\[\"(.*)\"\\]\\],"
    id, billErr := billingService.QueryDealByBpass(ctx, regx, inErr)
    if billErr != nil {
    log.Printf("[CRITAL]%s api[DescribeDeals] fail, reason[%s]\n", logId, billErr.Error())
    return resource.NonRetryableError(billErr)
    }
    // yunti prepaid user
    if id != nil {
    instanceId = *id
    return nil
    }
  instanceId: "instanceId = *response.Response.InstanceIds[0]"
  setId: "d.SetId(instanceId)"
  mysqlServer: |
    client := meta.(*TencentCloudClient).apiV3Conn
    mysqlService := MysqlService{client: client}
    tagService := &TagService{client: client}
  setTag: |
    // set tag before query the instance
    	if tags := helper.GetTags(d, "tags"); len(tags) > 0 {
    		resourceName := BuildTagResourceName("cdb", "instanceId", client.Region, d.Id())
    		if err := tagService.ModifyTags(ctx, resourceName, tags, nil); err != nil {
    			return err
    		}

    		// Wait the tags enabled
    		err := tagService.waitTagsEnable(ctx, "cdb", "instanceId", d.Id(), client.Region, tags)
    		if err != nil {
    			return err
    		}
    		// wait for describe enable
    		time.Sleep(3 * time.Second)
        }
  waitTag:
    // Wait the tags enabled
    err = tagService.waitTagsEnable(ctx, "cdb", "instanceId", d.Id(), region, replaceTags)
    if err != nil {
    return err
    }

tencentcloud/resource_tc_postgresql_instance.go:
  clientCreate: |
    client := meta.(*TencentCloudClient).apiV3Conn
    postgresqlService := PostgresqlService{client: client}
    tagService := TagService{client: client}
    billingService := BillingService{client: client}
    region := client.Region
  var: "chargeType     = d.Get(\"charge_type\").(string)"
  bypass: |
    log.Printf("[CRITAL]%s api[%s] fail, reason:%s", logId, "CreatePostgresqlInstance", inErr.Error())
    
    if chargeType == COMMON_PAYTYPE_PREPAID {
    regx := "\"dealNames\":\\[\"(.*)\"\\]"
    // query deal by bpass
    id, billErr := billingService.QueryDealByBpass(ctx, regx, inErr)
    if billErr != nil {
    	log.Printf("[CRITAL]%s api[QueryDealByBpass] fail, reason[%s]\n", logId, billErr.Error())
    	return resource.NonRetryableError(billErr)
    }
    // yunti prepaid user
    if id != nil {
    	instanceId = *id
    	return nil
    }
    }
  setTag: |
    // set tag before query the instance
    if tags := helper.GetTags(d, "tags"); len(tags) > 0 {
    resourceName := BuildTagResourceName("postgres", "DBInstanceId", region, d.Id())
    if err := tagService.ModifyTags(ctx, resourceName, tags, nil); err != nil {
    return err
    }
    
    // Wait the tags enabled
    err := tagService.waitTagsEnable(ctx, "postgres", "DBInstanceId", d.Id(), region, tags)
    if err != nil {
    return err
    }
    }
  clientUpdate: |
    cClient := meta.(*TencentCloudClient).apiV3Conn
    tagService := &TagService{client: tcClient}
    postgresqlService := PostgresqlService{client: tcClient}
  waitTag: |
    // Wait the tags enabled
    		err = tagService.waitTagsEnable(ctx, "postgres", "DBInstanceId", d.Id(), tcClient.Region, replaceTags)
    		if err != nil {
    			return err
    		}